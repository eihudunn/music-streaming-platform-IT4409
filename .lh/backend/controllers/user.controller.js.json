{
    "sourceFile": "backend/controllers/user.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1717456634009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717456692008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+const User = require(\"../schemas/user.js\");\r\n+const Playlist = require(\"../schemas/playlist.js\");\r\n+const Notification = require(\"../schemas/notification.js\");\r\n+const path = require(\"path\");\r\n+const fs = require(\"fs\");\r\n+const mongoose = require(\"mongoose\");\r\n+const {\r\n+  toLowerCaseNonAccentVietnamese,\r\n+} = require(\"../helper/vietnameseTextToLowerCase.js\");\r\n+const Album = require(\"../schemas/album.js\");\r\n+const cloudinary = require(\"cloudinary\").v2;\r\n+require(\"dotenv\").config();\r\n+\r\n+cloudinary.config({\r\n+  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n+  api_key: process.env.CLOUDINARY_API_KEY,\r\n+  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n+});\r\n+\r\n+const getUsers = async (req, res) => {\r\n+  try {\r\n+    const users = await User.find();\r\n+    res.json(users);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const getUserById = async (req, res) => {\r\n+  console.log(\"Im hereeee\");\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const user = await User.aggregate([\r\n+      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n+      {\r\n+        $lookup: {\r\n+          from: \"tracks\",\r\n+          localField: \"likedTracks\",\r\n+          foreignField: \"_id\",\r\n+          as: \"likedTracks\",\r\n+        },\r\n+      },\r\n+      {\r\n+        $lookup: {\r\n+          from: \"playlists\",\r\n+          localField: \"playlists\",\r\n+          foreignField: \"_id\",\r\n+          as: \"playlists\",\r\n+        },\r\n+      },\r\n+      {\r\n+        $lookup: {\r\n+          from: \"users\",\r\n+          localField: \"artistFollowed\",\r\n+          foreignField: \"_id\",\r\n+          as: \"artistFollowed\",\r\n+        },\r\n+      },\r\n+      {\r\n+        $lookup: {\r\n+          from: \"albums\",\r\n+          localField: \"albumsFollowed\",\r\n+          foreignField: \"_id\",\r\n+          as: \"albumsFollowed\",\r\n+        },\r\n+      },\r\n+    ]);\r\n+    console.log(user);\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    res.json(user);\r\n+  } catch (error) {\r\n+    console.log(error);\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const getLikedTracksByUserId = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const user = await User.aggregate([\r\n+      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n+      {\r\n+        $lookup: {\r\n+          from: \"tracks\",\r\n+          localField: \"likedTracks\",\r\n+          foreignField: \"_id\",\r\n+          as: \"likedTracks\",\r\n+        },\r\n+      },\r\n+    ]);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    res.json(user.liked);\r\n+  } catch (error) {\r\n+    console.log(error);\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const postUser = async (req, res) => {\r\n+  try {\r\n+    let avatarLink = \"./services/temp/\" + req.file.filename;\r\n+    const uploadImgResult = await cloudinary.uploader.upload(avatarLink, {\r\n+      resource_type: \"image\",\r\n+    });\r\n+    fs.unlink(avatarLink, (err) => {\r\n+      if (err) {\r\n+        console.error(err);\r\n+        return res.status(500).json({ message: err.message });\r\n+      }\r\n+    });\r\n+\r\n+    let user = new User({\r\n+      username: req.body.username,\r\n+      searchTitle: toLowerCaseNonAccentVietnamese(req.body.username),\r\n+      avatarImg: uploadImgResult.secure_url,\r\n+      email: req.body.email,\r\n+      password: req.body.password,\r\n+      following: [],\r\n+      artistFollowed: [],\r\n+      playlists: [],\r\n+      albumsFollowed: [],\r\n+      preferedGenre: [],\r\n+    });\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"User created successfully\", user });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const updateUser = async (req, res) => {\r\n+  try {\r\n+    let user = await User.findById(req.params.id);\r\n+    if (req.body.username) {\r\n+      user.username = req.body.username;\r\n+      user.searchTitle = toLowerCaseNonAccentVietnamese(req.body.username);\r\n+    }\r\n+    if (req.file) {\r\n+      let publicId = user.avatarImg.split(\"/\").pop().split(\".\")[0];\r\n+      await cloudinary.uploader.destroy(publicId);\r\n+      let avatarLink = \"./services/temp/\" + req.file.filename;\r\n+      const uploadImgResult = await cloudinary.uploader.upload(avatarLink, {\r\n+        resource_type: \"image\",\r\n+      });\r\n+      fs.unlink(avatarLink, (err) => {\r\n+        if (err) {\r\n+          console.error(err);\r\n+          return res.status(500).json({ message: err.message });\r\n+        }\r\n+      });\r\n+      user.avatarImg = uploadImgResult.secure_url;\r\n+    }\r\n+    if (req.body.email) user.email = req.body.email;\r\n+    if (req.body.password) user.password = req.body.password;\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"User updated successfully\", user });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const deleteUser = async (req, res) => {\r\n+  try {\r\n+    const user = await User.findById(req.params.id);\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    let publicId = user.avatarImg.split(\"/\").pop().split(\".\")[0];\r\n+    await cloudinary.uploader.destroy(publicId);\r\n+    if (user.playlists.length > 0) {\r\n+      user.playlists.forEach(async (playlist) => {\r\n+        const userPlaylist = await Playlist.findById(playlist);\r\n+        if (!userPlaylist) {\r\n+          return res.status(404).json({ message: \"Playlist not found\" });\r\n+        }\r\n+        let img = userPlaylist.img.split(\"/\").pop();\r\n+        await cloudinary.uploader.destroy(publicId);\r\n+        userPlaylist.remove();\r\n+      });\r\n+    }\r\n+    user.remove(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"User deleted successfully\", user });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const followArtist = async (req, res) => {\r\n+  try {\r\n+    let user = await User.findById(req.body.userId);\r\n+    let artist = await User.findById(req.body.artistId);\r\n+\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    if (!artist) {\r\n+      return res.status(404).json({ message: \"Artist not found\" });\r\n+    }\r\n+    if (!user.artistFollowed.includes(artist._id.toString())) {\r\n+      user.artistFollowed.push(artist._id);\r\n+    }\r\n+    if (!artist.following.includes(user._id.toString())) {\r\n+      artist.following.push(user._id);\r\n+    }\r\n+    artist.save();\r\n+    if (\r\n+      artist.following.length == 1000 ||\r\n+      artist.following.length == 10000 ||\r\n+      artist.following.length == 100000\r\n+    ) {\r\n+      let notify = new Notification({\r\n+        userId: artist._id,\r\n+        content: `You have reached ${artist.following.length} of followers!`,\r\n+        type: \"Congratulation\",\r\n+      });\r\n+      notify.save();\r\n+      if (artist.email) {\r\n+        const mailContent = `Your have reached ${track.plays} follower!`;\r\n+        const htmlMail = congratulationForm(artist.username, mailContent);\r\n+        sendMail(artist.email, contentTitle, htmlMail);\r\n+      }\r\n+    }\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"Artist followed successfully\", user, artist });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const unfollowArtist = async (req, res) => {\r\n+  try {\r\n+    let user = await User.findById(req.body.userId);\r\n+    let artist = await User.findById(req.body.artistId);\r\n+    user.artistFollowed = user.artistFollowed.filter(\r\n+      (artistId) => artistId.toString() !== artist._id.toString()\r\n+    );\r\n+    artist.following = artist.following.filter(\r\n+      (userId) => userId.toString() !== user._id.toString()\r\n+    );\r\n+    artist.save();\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"Artist unfollowed successfully\", user, artist });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const checkArtistFollowed = async (req, res) => {\r\n+  try {\r\n+    const { userId, artistId } = req.body;\r\n+    const user = await User.findById(userId);\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    const isFollowed = user.artistFollowed.includes(artistId);\r\n+    res.json({ isFollowed });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const checkAlbumFollowed = async (req, res) => {\r\n+  try {\r\n+    const { userId, albumId } = req.body;\r\n+    const user = await User.findById(userId);\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    const isFollowed = user.albumsFollowed.includes(albumId);\r\n+    res.json({ isFollowed });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const followAlbum = async (req, res) => {\r\n+  try {\r\n+    let user = await User.findById(req.body.userId);\r\n+    let album = await Album.findById(req.body.albumId);\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    if (!album) {\r\n+      return res.status(404).json({ message: \"Album not found\" });\r\n+    }\r\n+    user.albumsFollowed.push(album._id);\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"Album followed successfully\", user, album });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const unfollowAlbum = async (req, res) => {\r\n+  try {\r\n+    let user = await User.findById(req.body.userId);\r\n+    let album = await Album.findById(req.body.albumId);\r\n+    user.albumsFollowed = user.albumsFollowed.filter(\r\n+      (albumId) => albumId.toString() !== album._id.toString()\r\n+    );\r\n+    user.save(function (err) {\r\n+      if (err) {\r\n+        res.status(500).json({ message: err.message });\r\n+      } else {\r\n+        res.json({ message: \"Album unfollowed successfully\", user, album });\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const getNotify = async (req, res) => {\r\n+  try {\r\n+    const id = await User.findById(req.params.id);\r\n+    const notify = await Notification.find({ userId: id });\r\n+    if (!notify) {\r\n+      return res.status(200).json({ message: \"There are no notification\" });\r\n+    }\r\n+    res.status(200).json(notify);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+//debug\r\n+const getAllNotify = async (req, res) => {\r\n+  try {\r\n+    const notify = await Notification.find();\r\n+    res.status(200).json(notify);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+module.exports = {\r\n+  getUsers,\r\n+  getUserById,\r\n+  postUser,\r\n+  updateUser,\r\n+  deleteUser,\r\n+  followArtist,\r\n+  unfollowArtist,\r\n+  checkArtistFollowed,\r\n+  checkAlbumFollowed,\r\n+  followAlbum,\r\n+  unfollowAlbum,\r\n+  getNotify,\r\n+  getAllNotify,\r\n+};\r\n"
                },
                {
                    "date": 1717456697595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n     if (!user) {\r\n       return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    res.json(user.likedTrac);\r\n+    res.json(user.likedTrack);\r\n   } catch (error) {\r\n     console.log(error);\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1717456729997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,5 +382,6 @@\n   followAlbum,\r\n   unfollowAlbum,\r\n   getNotify,\r\n   getAllNotify,\r\n+  getLikedTracksByUserId\r\n };\r\n"
                }
            ],
            "date": 1717456634009,
            "name": "Commit-0",
            "content": "const User = require(\"../schemas/user.js\");\r\nconst Playlist = require(\"../schemas/playlist.js\");\r\nconst Notification = require(\"../schemas/notification.js\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst mongoose = require(\"mongoose\");\r\nconst {\r\n  toLowerCaseNonAccentVietnamese,\r\n} = require(\"../helper/vietnameseTextToLowerCase.js\");\r\nconst Album = require(\"../schemas/album.js\");\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nrequire(\"dotenv\").config();\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nconst getUsers = async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getUserById = async (req, res) => {\r\n  console.log(\"Im hereeee\");\r\n  try {\r\n    const { id } = req.params;\r\n    const user = await User.aggregate([\r\n      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n      {\r\n        $lookup: {\r\n          from: \"tracks\",\r\n          localField: \"likedTracks\",\r\n          foreignField: \"_id\",\r\n          as: \"likedTracks\",\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"playlists\",\r\n          localField: \"playlists\",\r\n          foreignField: \"_id\",\r\n          as: \"playlists\",\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"users\",\r\n          localField: \"artistFollowed\",\r\n          foreignField: \"_id\",\r\n          as: \"artistFollowed\",\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"albums\",\r\n          localField: \"albumsFollowed\",\r\n          foreignField: \"_id\",\r\n          as: \"albumsFollowed\",\r\n        },\r\n      },\r\n    ]);\r\n    console.log(user);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getLikedTracksByUserId = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const user = await User.aggregate([\r\n      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n      {\r\n        $lookup: {\r\n          from: \"tracks\",\r\n          localField: \"likedTracks\",\r\n          foreignField: \"_id\",\r\n          as: \"likedTracks\",\r\n        },\r\n      },\r\n    ]);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst postUser = async (req, res) => {\r\n  try {\r\n    let avatarLink = \"./services/temp/\" + req.file.filename;\r\n    const uploadImgResult = await cloudinary.uploader.upload(avatarLink, {\r\n      resource_type: \"image\",\r\n    });\r\n    fs.unlink(avatarLink, (err) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: err.message });\r\n      }\r\n    });\r\n\r\n    let user = new User({\r\n      username: req.body.username,\r\n      searchTitle: toLowerCaseNonAccentVietnamese(req.body.username),\r\n      avatarImg: uploadImgResult.secure_url,\r\n      email: req.body.email,\r\n      password: req.body.password,\r\n      following: [],\r\n      artistFollowed: [],\r\n      playlists: [],\r\n      albumsFollowed: [],\r\n      preferedGenre: [],\r\n    });\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"User created successfully\", user });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst updateUser = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.params.id);\r\n    if (req.body.username) {\r\n      user.username = req.body.username;\r\n      user.searchTitle = toLowerCaseNonAccentVietnamese(req.body.username);\r\n    }\r\n    if (req.file) {\r\n      let publicId = user.avatarImg.split(\"/\").pop().split(\".\")[0];\r\n      await cloudinary.uploader.destroy(publicId);\r\n      let avatarLink = \"./services/temp/\" + req.file.filename;\r\n      const uploadImgResult = await cloudinary.uploader.upload(avatarLink, {\r\n        resource_type: \"image\",\r\n      });\r\n      fs.unlink(avatarLink, (err) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: err.message });\r\n        }\r\n      });\r\n      user.avatarImg = uploadImgResult.secure_url;\r\n    }\r\n    if (req.body.email) user.email = req.body.email;\r\n    if (req.body.password) user.password = req.body.password;\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"User updated successfully\", user });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst deleteUser = async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.params.id);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    let publicId = user.avatarImg.split(\"/\").pop().split(\".\")[0];\r\n    await cloudinary.uploader.destroy(publicId);\r\n    if (user.playlists.length > 0) {\r\n      user.playlists.forEach(async (playlist) => {\r\n        const userPlaylist = await Playlist.findById(playlist);\r\n        if (!userPlaylist) {\r\n          return res.status(404).json({ message: \"Playlist not found\" });\r\n        }\r\n        let img = userPlaylist.img.split(\"/\").pop();\r\n        await cloudinary.uploader.destroy(publicId);\r\n        userPlaylist.remove();\r\n      });\r\n    }\r\n    user.remove(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"User deleted successfully\", user });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst followArtist = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let artist = await User.findById(req.body.artistId);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    if (!artist) {\r\n      return res.status(404).json({ message: \"Artist not found\" });\r\n    }\r\n    if (!user.artistFollowed.includes(artist._id.toString())) {\r\n      user.artistFollowed.push(artist._id);\r\n    }\r\n    if (!artist.following.includes(user._id.toString())) {\r\n      artist.following.push(user._id);\r\n    }\r\n    artist.save();\r\n    if (\r\n      artist.following.length == 1000 ||\r\n      artist.following.length == 10000 ||\r\n      artist.following.length == 100000\r\n    ) {\r\n      let notify = new Notification({\r\n        userId: artist._id,\r\n        content: `You have reached ${artist.following.length} of followers!`,\r\n        type: \"Congratulation\",\r\n      });\r\n      notify.save();\r\n      if (artist.email) {\r\n        const mailContent = `Your have reached ${track.plays} follower!`;\r\n        const htmlMail = congratulationForm(artist.username, mailContent);\r\n        sendMail(artist.email, contentTitle, htmlMail);\r\n      }\r\n    }\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"Artist followed successfully\", user, artist });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst unfollowArtist = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let artist = await User.findById(req.body.artistId);\r\n    user.artistFollowed = user.artistFollowed.filter(\r\n      (artistId) => artistId.toString() !== artist._id.toString()\r\n    );\r\n    artist.following = artist.following.filter(\r\n      (userId) => userId.toString() !== user._id.toString()\r\n    );\r\n    artist.save();\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"Artist unfollowed successfully\", user, artist });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst checkArtistFollowed = async (req, res) => {\r\n  try {\r\n    const { userId, artistId } = req.body;\r\n    const user = await User.findById(userId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    const isFollowed = user.artistFollowed.includes(artistId);\r\n    res.json({ isFollowed });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst checkAlbumFollowed = async (req, res) => {\r\n  try {\r\n    const { userId, albumId } = req.body;\r\n    const user = await User.findById(userId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    const isFollowed = user.albumsFollowed.includes(albumId);\r\n    res.json({ isFollowed });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst followAlbum = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let album = await Album.findById(req.body.albumId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    if (!album) {\r\n      return res.status(404).json({ message: \"Album not found\" });\r\n    }\r\n    user.albumsFollowed.push(album._id);\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"Album followed successfully\", user, album });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst unfollowAlbum = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let album = await Album.findById(req.body.albumId);\r\n    user.albumsFollowed = user.albumsFollowed.filter(\r\n      (albumId) => albumId.toString() !== album._id.toString()\r\n    );\r\n    user.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res.json({ message: \"Album unfollowed successfully\", user, album });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getNotify = async (req, res) => {\r\n  try {\r\n    const id = await User.findById(req.params.id);\r\n    const notify = await Notification.find({ userId: id });\r\n    if (!notify) {\r\n      return res.status(200).json({ message: \"There are no notification\" });\r\n    }\r\n    res.status(200).json(notify);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//debug\r\nconst getAllNotify = async (req, res) => {\r\n  try {\r\n    const notify = await Notification.find();\r\n    res.status(200).json(notify);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\nmodule.exports = {\r\n  getUsers,\r\n  getUserById,\r\n  postUser,\r\n  updateUser,\r\n  deleteUser,\r\n  followArtist,\r\n  unfollowArtist,\r\n  checkArtistFollowed,\r\n  checkAlbumFollowed,\r\n  followAlbum,\r\n  unfollowAlbum,\r\n  getNotify,\r\n  getAllNotify,\r\n};\r\n"
        }
    ]
}