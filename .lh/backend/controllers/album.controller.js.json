{
    "sourceFile": "backend/controllers/album.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717484058558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717484058558,
            "name": "Commit-0",
            "content": "const Track = require(\"../schemas/track.js\");\r\nconst Album = require(\"../schemas/album.js\");\r\nconst User = require(\"../schemas/user.js\");\r\nconst Notification = require(\"../schemas/notification.js\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst {\r\n  toLowerCaseNonAccentVietnamese,\r\n} = require(\"../helper/vietnameseTextToLowerCase.js\");\r\nconst { newAlbumForm } = require(\"../helper/formHelper.js\");\r\nconst { sendMail } = require(\"../helper/sendEmail.js\");\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nrequire(\"dotenv\").config();\r\nconst mongoose = require(\"mongoose\");\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nconst getAlbums = async (req, res) => {\r\n  try {\r\n    const albums = await Album.find();\r\n    res.json(albums);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getAlbumById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const album = await Album.aggregate([\r\n      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n      {\r\n        $lookup: {\r\n          from: \"tracks\",\r\n          localField: \"tracks\",\r\n          foreignField: \"_id\",\r\n          as: \"tracks\",\r\n        },\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"users\",\r\n          localField: \"artistId\",\r\n          foreignField: \"_id\",\r\n          as: \"artistData\",\r\n        },\r\n      },\r\n    ]);\r\n    if (!album) {\r\n      return res.status(404).json({ message: \"Album not found\" });\r\n    }\r\n    res.json(album);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getAlbumsByArtistId = async (req, res) => {\r\n  try {\r\n    const albums = await Album.find({ artistId: req.params.userId });\r\n    if (!albums.length) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No albums found for this artist\" });\r\n    }\r\n    res.json(albums);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst uploadAlbum = async (req, res) => {\r\n  try {\r\n    let imgLink = \"./services/temp/\" + req.file.filename;\r\n    const uploadImgResult = await cloudinary.uploader.upload(imgLink, {\r\n      resource_type: \"image\",\r\n    });\r\n    fs.unlink(imgLink, (err) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: err.message });\r\n      }\r\n    });\r\n    let album = new Album({\r\n      title: req.body.title,\r\n      searchTitle: toLowerCaseNonAccentVietnamese(req.body.title),\r\n      img: uploadImgResult.secure_url,\r\n      artist: req.body.artist,\r\n      artistId: req.body.artistId,\r\n      genre: req.body.genre || null,\r\n      year: req.body.year || null,\r\n      tracks: req.body.tracks,\r\n    });\r\n    await new Promise((resolve, reject) => {\r\n      album.save(async function (err) {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          try {\r\n            const artist = await User.findById(req.body.artistId);\r\n            if (album.sendNotify) {\r\n              const promises = artist.following.map(async (followerId) => {\r\n                const follower = await User.findById(followerId);\r\n                let notify = new Notification({\r\n                  userId: followerId.toString(),\r\n                  content:\r\n                    \"New album \" +\r\n                    album.title +\r\n                    \" by \" +\r\n                    album.artist +\r\n                    \" has been uploaded!\",\r\n                  type: \"New\",\r\n                });\r\n                if (follower.email) {\r\n                  const contentTitle = `Your artist ${artist.username} has uploaded an album! `;\r\n                  const htmlMail = newAlbumForm(\r\n                    artist.username,\r\n                    req.body.title,\r\n                    `http://localhost:3000/album/${album._id}`\r\n                  ); //album.href ở bên frontend\r\n                  sendMail(follower?.email, contentTitle, htmlMail);\r\n                }\r\n                return notify.save();\r\n              });\r\n              await Promise.all(promises);\r\n            }\r\n            resolve();\r\n          } catch (err) {\r\n            reject(err);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    res.status(200).json({ message: \"Album uploaded successfully!\", album });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst deleteAlbum = async (req, res) => {\r\n  try {\r\n    const album = await Album.findById(req.params.id);\r\n    if (!album) {\r\n      return res.status(404).json({ message: \"Album not found\" });\r\n    }\r\n    const publicId = album.img.split(\"/\").pop().split(\".\")[0];\r\n    const deleteResult = await cloudinary.uploader.destroy(publicId);\r\n    if (deleteResult.result !== \"ok\" && deleteResult.result !== \"not found\") {\r\n      return res.status(500).json({\r\n        message: \"Failed to delete album image from cloudinary\",\r\n        deleteResult,\r\n      });\r\n    }\r\n    album.remove(async function (err) {\r\n      try {\r\n        const artist = await User.findById(album.artistId);\r\n        if (album.sendNotify) {\r\n          artist.following.forEach((followerId) => {\r\n            let notify = new Notification({\r\n              userId: followerId.toString(),\r\n              content:\r\n                \"Album \" +\r\n                album.title +\r\n                \" by \" +\r\n                album.artist +\r\n                \" has been deleted!\",\r\n              type: \"Warning\",\r\n            });\r\n            notify.save();\r\n          });\r\n        }\r\n        res.json({ message: \"Album deleted successfully!\", album });\r\n      } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst updateAlbum = async (req, res) => {\r\n  try {\r\n    const album = await Album.findById(req.params.id);\r\n    if (!album) {\r\n      return res.status(404).json({ message: \"Album not found\" });\r\n    }\r\n    const { title, artist, genre, year, tracks, sendNotify } = req.body;\r\n    if (title) album.title = title;\r\n    if (artist) album.artist = artist;\r\n    if (genre) album.genre = genre;\r\n    if (year) album.year = year;\r\n    if (tracks) album.tracks = tracks;\r\n    if (sendNotify) album.sendNotify = sendNotify;\r\n    if (req.file) {\r\n      const publicId = album.img.split(\"/\").pop().split(\".\")[0];\r\n      const deletionResult = await cloudinary.uploader.destroy(publicId, {\r\n        resource_type: \"image\",\r\n      });\r\n      if (\r\n        deletionResult.result !== \"ok\" &&\r\n        deletionResult.result !== \"not found\"\r\n      ) {\r\n        console.error(\r\n          \"Error deleting image from Cloudinary:\",\r\n          deletionResult.error.message\r\n        );\r\n      }\r\n      let imgLink = \"./services/temp/\" + req.file.filename;\r\n      const uploadImgResult = await cloudinary.uploader.upload(imgLink, {\r\n        resource_type: \"image\",\r\n      });\r\n      fs.unlink(imgLink, (err) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: err.message });\r\n        }\r\n      });\r\n      album.img = uploadImgResult.secure_url;\r\n    }\r\n    album.save(async function (err) {\r\n      try {\r\n        const artist = await User.findById(album.artistId);\r\n        if (album.sendNotify) {\r\n          artist.following.forEach(async (followerId) => {\r\n            const follower = await User.findById(followerId);\r\n            let notify = new Notification({\r\n              userId: followerId.toString(),\r\n              content:\r\n                \"Album \" +\r\n                album.title +\r\n                \" by \" +\r\n                album.artist +\r\n                \" has been updated!\",\r\n              type: \"Updated\",\r\n            });\r\n            if (follower.email) {\r\n              const contentTitle = `Your artist ${artist.username} has updated an album! `;\r\n              const htmlMail = newAlbumForm(\r\n                artist.username,\r\n                album.title,\r\n                \"google.com\"\r\n              ); //album.href ở bên frontend\r\n              sendMail(follower.email, contentTitle, htmlMail);\r\n            }\r\n            notify.save();\r\n          });\r\n        }\r\n      } catch (err) {\r\n        res.status(500).json({ message: err.message });\r\n      }\r\n    });\r\n    res.json({ message: \"Album updated successfully!\", album: album });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getAlbums,\r\n  getAlbumById,\r\n  getAlbumsByArtistId,\r\n  uploadAlbum,\r\n  deleteAlbum,\r\n  updateAlbum,\r\n};\r\n"
        }
    ]
}