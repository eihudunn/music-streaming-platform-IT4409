{
    "sourceFile": "backend/controllers/track.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1717455517852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717455569119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n });\r\n \r\n const getTracks = async (req, res) => {\r\n   try {\r\n-    const tracks = await Track.find();\r\n+    const tracks = await Track.find().sort({ createTime: -1 });\r\n     res.json(tracks);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1717455575117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n });\r\n \r\n const getTracks = async (req, res) => {\r\n   try {\r\n-    const tracks = await Track.find().sort({ createTime: -1 });\r\n+    const tracks = await Track.find().sort({ createAt: -1 });\r\n     res.json(tracks);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                }
            ],
            "date": 1717455517852,
            "name": "Commit-0",
            "content": "const Track = require(\"../schemas/track.js\");\r\nconst mongoose = require(\"mongoose\");\r\nconst Album = require(\"../schemas/album.js\");\r\nconst User = require(\"../schemas/user.js\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst {\r\n  toLowerCaseNonAccentVietnamese,\r\n} = require(\"../helper/vietnameseTextToLowerCase.js\");\r\nconst { sendMail } = require(\"../helper/sendEmail.js\");\r\nconst { congratulationForm } = require(\"../helper/formHelper.js\");\r\nconst Notification = require(\"../schemas/notification.js\");\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nrequire(\"dotenv\").config();\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nconst getTracks = async (req, res) => {\r\n  try {\r\n    const tracks = await Track.find();\r\n    res.json(tracks);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getTracksById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const track = await Track.aggregate([\r\n      { $match: { _id: mongoose.Types.ObjectId(id) } },\r\n      {\r\n        $lookup: {\r\n          from: \"users\",\r\n          localField: \"userId\",\r\n          foreignField: \"_id\",\r\n          as: \"artistData\",\r\n        },\r\n      },\r\n    ]);\r\n    if (track == null) {\r\n      return res.status(404).json({ message: \"Cannot find track\" });\r\n    }\r\n    res.json(track);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst getTracksByUserId = async (req, res) => {\r\n  try {\r\n    const tracks = await Track.find({ userId: req.params.userId });\r\n    if (!tracks.length) {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"Cannot find tracks for the provided user ID\" });\r\n    }\r\n    res.json(tracks);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst uploadTrack = async (req, res) => {\r\n  try {\r\n    let hrefLink = \"./services/temp/\" + req.files.song[0].filename;\r\n    let imgLink = \"./services/temp/\" + req.files.img[0].filename;\r\n\r\n    const uploadHrefResult = await cloudinary.uploader.upload(hrefLink, {\r\n      resource_type: \"raw\",\r\n    });\r\n    fs.unlink(hrefLink, (err) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: err.message });\r\n      }\r\n    });\r\n    console.log(uploadHrefResult.public_id);\r\n\r\n    const uploadImgResult = await cloudinary.uploader.upload(imgLink, {\r\n      resource_type: \"image\",\r\n    });\r\n    fs.unlink(imgLink, (err) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: err.message });\r\n      }\r\n    });\r\n    let track = new Track({\r\n      title: req.body.title,\r\n      artist: req.body.artist,\r\n      artistId: req.body.artistId,\r\n      userId: req.body.userId,\r\n      searchTitle: toLowerCaseNonAccentVietnamese(req.body.title),\r\n      href: uploadHrefResult.secure_url,\r\n      img: uploadImgResult.secure_url,\r\n      album: req.body.album,\r\n      genre: req.body.genre,\r\n      plays: 0,\r\n      likes: 0,\r\n      comments: [],\r\n    });\r\n\r\n    track.save(function (err) {\r\n      if (err) {\r\n        res.status(500).json({ message: err.message });\r\n      } else {\r\n        res\r\n          .status(200)\r\n          .json({ message: \"Track uploaded successfully!\", track: track });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst updateTrack = async (req, res) => {\r\n  try {\r\n    const track = await Track.findById(req.params.id);\r\n    if (!track) {\r\n      return res.status(404).json({ message: \"Track not found\" });\r\n    }\r\n    const { title, artist, album, genre } = req.body;\r\n    console.log(req.body);\r\n    if (title) {\r\n      track.title = title;\r\n      track.searchTitle = toLowerCaseNonAccentVietnamese(title);\r\n    }\r\n    if (artist) track.artist = artist;\r\n    if (album) track.album = album;\r\n    if (genre) track.genre = genre;\r\n    if (req.files.song[0]) {\r\n      const publicId = track.href.split(\"/\").pop();\r\n      const deletionResult = await cloudinary.uploader.destroy(publicId, {\r\n        resource_type: \"raw\",\r\n      });\r\n      console.log({ deletionResult });\r\n      if (\r\n        deletionResult.result !== \"ok\" &&\r\n        deletionResult.result !== \"not found\"\r\n      ) {\r\n        console.error(\r\n          \"Error deleting track from Cloudinary:\",\r\n          deletionResult.error.message\r\n        );\r\n      }\r\n      let hrefLink = \"./services/temp/\" + req.files.song[0].filename;\r\n      const uploadHrefResult = await cloudinary.uploader.upload(hrefLink, {\r\n        resource_type: \"raw\",\r\n      });\r\n      fs.unlink(hrefLink, (err) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: err.message });\r\n        }\r\n      });\r\n      track.href = uploadHrefResult.secure_url;\r\n    }\r\n    if (req.files.img[0]) {\r\n      const publicId = track.img.split(\"/\").pop().split(\".\")[0];\r\n      console.log(publicId);\r\n      const deletionResult = await cloudinary.uploader.destroy(publicId, {\r\n        resource_type: \"image\",\r\n      });\r\n      console.log(` img deleting error: ${deletionResult}`);\r\n      if (\r\n        deletionResult.result !== \"ok\" &&\r\n        deletionResult.result !== \"not found\"\r\n      ) {\r\n        console.error(\r\n          \"Error deleting image from Cloudinary:\",\r\n          deletionResult.error.message\r\n        );\r\n      }\r\n      let imgLink = \"./services/temp/\" + req.files.img[0].filename;\r\n      const uploadImgResult = await cloudinary.uploader.upload(imgLink, {\r\n        resource_type: \"image\",\r\n      });\r\n      fs.unlink(imgLink, (err) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: err.message });\r\n        }\r\n      });\r\n      track.img = uploadImgResult.secure_url;\r\n    }\r\n    await track.save();\r\n    res.json({ message: \"Track updated successfully!\", track });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst deleteTrack = async (req, res) => {\r\n  try {\r\n    const trackId = req.params.id;\r\n    const track = await Track.findById(trackId);\r\n    if (!track) {\r\n      return res.status(404).json({ message: \"Track not found\" });\r\n    }\r\n    const publicTrackId = track.href.split(\"/\").pop();\r\n    const deletionTrackResult = await cloudinary.uploader.destroy(\r\n      publicTrackId,\r\n      { resource_type: \"raw\" }\r\n    );\r\n    if (\r\n      deletionTrackResult.result !== \"ok\" &&\r\n      deletionTrackResult.result !== \"not found\"\r\n    ) {\r\n      console.error(\r\n        \"Error deleting track from Cloudinary:\",\r\n        deletionTrackResult.error.message\r\n      );\r\n      res.status(400).json({ message: \"Error deleting track from cloudinary\" });\r\n    }\r\n    const publicImgId = track.img.split(\"/\").pop().split(\".\")[0];\r\n    const deletionImgResult = await cloudinary.uploader.destroy(publicImgId, {\r\n      resource_type: \"image\",\r\n    });\r\n    if (\r\n      deletionImgResult.result !== \"ok\" &&\r\n      deletionImgResult.result !== \"not found\"\r\n    ) {\r\n      console.error(\r\n        \"Error deleting image from Cloudinary:\",\r\n        deletionImgResult.error.message\r\n      );\r\n      res.status(400).json({ message: \"Error deleting img from cloudinary\" });\r\n    }\r\n    await track.deleteOne();\r\n    res.status(200).json({ message: \"Track deleted successfully\", track });\r\n  } catch (error) {\r\n    console.error(\"Error deleting track:\", error.message);\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst trackSuggestion = async (req, res) => {\r\n  try {\r\n    const oneWeekAgo = new Date();\r\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n    oneWeekAgo.setHours(0, 0, 0, 0);\r\n    const id = req.params.id;\r\n    const user = await User.findById(id);\r\n    const MostPopularTracks = await Track.find()\r\n      .sort({ plays: -1, likes: -1 })\r\n      .limit(10);\r\n    const HotTracks = await Track.find({\r\n      createdAt: {\r\n        $gte: oneWeekAgo,\r\n      },\r\n    })\r\n      .sort({ likes: -1, plays: -1 })\r\n      .limit(10);\r\n    if (!id || !user) {\r\n      return res.json({ MostPopularTracks, HotTracks });\r\n    } else {\r\n      const artistFollowed = user.artistFollowed;\r\n      console.log(artistFollowed);\r\n      let artistFollowedTracks = [];\r\n      for (let i = 0; i < artistFollowed.length; i++) {\r\n        const artistTracks = await Track.find({\r\n          artistId: mongoose.Types.ObjectId(artistFollowed[i]),\r\n          createdAt: {\r\n            $gte: oneWeekAgo,\r\n          },\r\n        })\r\n          .sort({ likes: -1, plays: -1 })\r\n          .limit(10);\r\n        artistFollowedTracks = artistFollowedTracks.concat(artistTracks);\r\n      }\r\n      const favouriteGenre = user.preferedGenre;\r\n      console.log(favouriteGenre);\r\n      let favouriteGenreTracks = [];\r\n      for (let i = 0; i < favouriteGenre.length; i++) {\r\n        const genreTracks = await Track.find({\r\n          genre: favouriteGenre[i].genre?.toString(),\r\n          createdAt: {\r\n            $gte: oneWeekAgo,\r\n          },\r\n        })\r\n          .sort({ likes: -1, plays: -1 })\r\n          .limit(10);\r\n        favouriteGenreTracks = favouriteGenreTracks.concat({\r\n          genre: favouriteGenre[i].genre,\r\n          tracks: genreTracks,\r\n        });\r\n      }\r\n      res.json({\r\n        MostPopularTracks,\r\n        HotTracks,\r\n        artistFollowedTracks,\r\n        favouriteGenreTracks,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst playTrack = async (req, res) => {\r\n  try {\r\n    const { trackId, userId, play } = req.body;\r\n    const track = await Track.findById(trackId);\r\n    if (play) track.plays += play;\r\n    else track.plays++;\r\n    await track.save();\r\n    const user = await User.findById(userId);\r\n    let genreExists = false;\r\n    user.preferedGenre = user.preferedGenre.map((g) => {\r\n      if (g.genre?.toString() === track.genre?.toString()) {\r\n        g.weight++;\r\n        genreExists = true;\r\n      }\r\n      return g;\r\n    });\r\n    if (!genreExists) {\r\n      user.preferedGenre.push({\r\n        genre: track.genre,\r\n        weight: 1,\r\n      });\r\n    }\r\n    await user.save();\r\n    if (\r\n      track.plays === 10000 ||\r\n      track.plays === 100000 ||\r\n      track.plays === 1000000\r\n    ) {\r\n      const artist = await User.findById(track.userId);\r\n      let contentTitle = `Congratulation, your track: ${track.title} have been listened for ${track.plays} times!`;\r\n      let notify = new Notification({\r\n        userId: track.userId.toString(),\r\n        content: contentTitle,\r\n        type: \"Congratulation\",\r\n      });\r\n      notify.save();\r\n      if (artist.email) {\r\n        const mailContent = `Your track: ${track.title} have reached ${track.plays} plays times!`;\r\n        const htmlMail = congratulationForm(artist.username, mailContent);\r\n        sendMail(artist.email, contentTitle, htmlMail);\r\n      }\r\n    }\r\n    res.json({ message: \"Track played successfully!\", track, user });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst likeTracks = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let track = await Track.findById(req.body.trackId);\r\n    let like = req.body.like;\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    if (!track) {\r\n      return res.status(404).json({ message: \"Track not found\" });\r\n    }\r\n    if (!user.likedTracks.includes(track._id?.toString())) {\r\n      let genreExists = false;\r\n      user.preferedGenre = user.preferedGenre.map((g) => {\r\n        if (g.genre?.toString() === track.genre?.toString()) {\r\n          g.weight += 10;\r\n        }\r\n        return g;\r\n      });\r\n      if (!genreExists) {\r\n        user.preferedGenre.push({\r\n          genre: track.genre,\r\n          weight: 10,\r\n        });\r\n      }\r\n      user.likedTracks.push(track._id);\r\n      if (like) track.likes += like;\r\n      else track.likes++;\r\n      user.save();\r\n      track.save();\r\n    }\r\n    if (\r\n      track.likes === 10000 ||\r\n      track.likes === 100000 ||\r\n      track.likes === 1000000\r\n    ) {\r\n      const artist = await User.findById(track.userId);\r\n      let contentTitle = `Congratulation, your track: ${track.title} have reached ${track.likes} likes!`;\r\n      let notify = new Notification({\r\n        userId: track.userId.toString(),\r\n        content: contentTitle,\r\n        type: \"Congratulation\",\r\n      });\r\n      notify.save();\r\n      if (artist.email) {\r\n        const mailContent = `Your track: ${track.title} have reached ${track.likes} likes!`;\r\n        const htmlMail = congratulationForm(artist.username, mailContent);\r\n        sendMail(artist.email, contentTitle, htmlMail);\r\n      }\r\n    }\r\n    res.json({ message: \"Track liked successfully\", user, track });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst unlikeTracks = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let track = await Track.findById(req.body.trackId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    if (!track) {\r\n      return res.status(404).json({ message: \"Track not found\" });\r\n    }\r\n    user.likedTracks = user.likedTracks.filter(\r\n      (trackId) => trackId.toString() !== track._id.toString()\r\n    );\r\n    user.preferedGenre = user.preferedGenre.map((g) => {\r\n      if (g.genre === track.genre) {\r\n        g.weight -= 10;\r\n      }\r\n      return g;\r\n    });\r\n    track.likes--;\r\n    user.save();\r\n    track.save();\r\n    res.json({ message: \"Track unliked successfully\", user, track });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nconst isTrackLiked = async (req, res) => {\r\n  try {\r\n    let user = await User.findById(req.body.userId);\r\n    let track = await Track.findById(req.body.trackId);\r\n    let like = req.body.like;\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    if (!track) {\r\n      return res.status(404).json({ message: \"Track not found\" });\r\n    }\r\n    if (!user.likedTracks.includes(track._id.toString())) {\r\n      res.json({ isLiked: false });\r\n    } else {\r\n      res.json({ isLiked: true });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getTracks,\r\n  getTracksById,\r\n  getTracksByUserId,\r\n  uploadTrack,\r\n  deleteTrack,\r\n  updateTrack,\r\n  trackSuggestion,\r\n  playTrack,\r\n  likeTracks,\r\n  unlikeTracks,\r\n  isTrackLiked,\r\n};\r\n"
        }
    ]
}