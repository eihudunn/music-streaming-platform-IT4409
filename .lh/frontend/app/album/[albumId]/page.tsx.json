{
    "sourceFile": "frontend/app/album/[albumId]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1717458964854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717458976499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+'use client';\r\n+\r\n+import { Palette } from 'color-thief-react';\r\n+import Header from '@/components/Header';\r\n+import Image from 'next/image';\r\n+import { useParams } from 'next/navigation';\r\n+import React, { useEffect, useState } from 'react';\r\n+import LikedContent from '@/app/liked/components/LikedContent';\r\n+import Album from '@/scheme/Album';\r\n+import getAlbumById from '@/actions/album/getAlbumById';\r\n+import PageBreak from '@/components/PageBreak';\r\n+import { LibraryType } from '@/const/libraryType';\r\n+\r\n+const AlbumDetail = () => {\r\n+  const params = useParams<{ albumId: string }>();\r\n+  const albumId = params?.albumId;\r\n+  const [data, setData] = useState<Album | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const getAlbum = async () => {\r\n+      const album = await getAlbumById(albumId as string);\r\n+      if (album) {\r\n+        setData(album);\r\n+      } else {\r\n+        console.error('No album found');\r\n+      }\r\n+    };\r\n+    if (albumId) {\r\n+      getAlbum();\r\n+    }\r\n+  }, [albumId]);\r\n+\r\n+  return (\r\n+    <div className=\"flex-grow h-screen rounded-lg\">\r\n+      {data && (\r\n+        <Palette\r\n+          src={data?.img as string}\r\n+          crossOrigin=\"anonymous\"\r\n+          format=\"hex\"\r\n+          colorCount={3}\r\n+        >\r\n+          {({ data: imgColor, loading }) => {\r\n+            console.log(imgColor);\r\n+            if (loading) return <div>Loading...</div>;\r\n+            let color;\r\n+            if (imgColor) {\r\n+              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n+            } else {\r\n+              color = '#05614C';\r\n+            }\r\n+            return (\r\n+              <>\r\n+                <Header\r\n+                  title={data?.title as string}\r\n+                  isContentDetail={true}\r\n+                  style={{\r\n+                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n+                  }}\r\n+                >\r\n+                  <div className=\"mt-5\">\r\n+                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n+                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n+                        <Image\r\n+                          fill\r\n+                          src={data?.img as string}\r\n+                          alt={data?.title as string}\r\n+                          className=\"object-cover\"\r\n+                        />\r\n+                      </div>\r\n+                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n+                        <p className=\"hidden md:block font-semibold text-lg\">\r\n+                          Album\r\n+                        </p>\r\n+                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n+                          {data?.title}\r\n+                        </h1>\r\n+                        <div className=\"flex items-center gap-x-2\">\r\n+                          <Image\r\n+                            src={data?.artistData?.[0].avatarImg}\r\n+                            alt=\"avt\"\r\n+                            className=\"rounded-full h-8 w-8\"\r\n+                            width={32}\r\n+                            height={32}\r\n+                          />\r\n+                          <p className=\"text-white\">{data?.artist}</p>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </Header>\r\n+                <PageBreak\r\n+                  songs={data?.tracks}\r\n+                  id={data?.id}\r\n+                  type={LibraryType.Album}\r\n+                />\r\n+                <LikedContent songs={data?.tracks}/>\r\n+              </>\r\n+            );\r\n+          }}\r\n+        </Palette>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AlbumDetail;\r\n"
                },
                {
                    "date": 1717458981603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,110 +103,4 @@\n   );\r\n };\r\n \r\n export default AlbumDetail;\r\n-'use client';\r\n-\r\n-import { Palette } from 'color-thief-react';\r\n-import Header from '@/components/Header';\r\n-import Image from 'next/image';\r\n-import { useParams } from 'next/navigation';\r\n-import React, { useEffect, useState } from 'react';\r\n-import LikedContent from '@/app/liked/components/LikedContent';\r\n-import Album from '@/scheme/Album';\r\n-import getAlbumById from '@/actions/album/getAlbumById';\r\n-import PageBreak from '@/components/PageBreak';\r\n-import { LibraryType } from '@/const/libraryType';\r\n-\r\n-const AlbumDetail = () => {\r\n-  const params = useParams<{ albumId: string }>();\r\n-  const albumId = params?.albumId;\r\n-  const [data, setData] = useState<Album | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const getAlbum = async () => {\r\n-      const album = await getAlbumById(albumId as string);\r\n-      if (album) {\r\n-        setData(album);\r\n-      } else {\r\n-        console.error('No album found');\r\n-      }\r\n-    };\r\n-    if (albumId) {\r\n-      getAlbum();\r\n-    }\r\n-  }, [albumId]);\r\n-\r\n-  return (\r\n-    <div className=\"flex-grow h-screen rounded-lg\">\r\n-      {data && (\r\n-        <Palette\r\n-          src={data?.img as string}\r\n-          crossOrigin=\"anonymous\"\r\n-          format=\"hex\"\r\n-          colorCount={3}\r\n-        >\r\n-          {({ data: imgColor, loading }) => {\r\n-            console.log(imgColor);\r\n-            if (loading) return <div>Loading...</div>;\r\n-            let color;\r\n-            if (imgColor) {\r\n-              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n-            } else {\r\n-              color = '#05614C';\r\n-            }\r\n-            return (\r\n-              <>\r\n-                <Header\r\n-                  title={data?.title as string}\r\n-                  isContentDetail={true}\r\n-                  style={{\r\n-                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n-                  }}\r\n-                >\r\n-                  <div className=\"mt-5\">\r\n-                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n-                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n-                        <Image\r\n-                          fill\r\n-                          src={data?.img as string}\r\n-                          alt={data?.title as string}\r\n-                          className=\"object-cover\"\r\n-                        />\r\n-                      </div>\r\n-                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n-                        <p className=\"hidden md:block font-semibold text-lg\">\r\n-                          Album\r\n-                        </p>\r\n-                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n-                          {data?.title}\r\n-                        </h1>\r\n-                        <div className=\"flex items-center gap-x-2\">\r\n-                          <Image\r\n-                            src={data?.artistData?.[0].avatarImg}\r\n-                            alt=\"avt\"\r\n-                            className=\"rounded-full h-8 w-8\"\r\n-                            width={32}\r\n-                            height={32}\r\n-                          />\r\n-                          <p className=\"text-white\">{data?.artist}</p>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </Header>\r\n-                <PageBreak\r\n-                  songs={data?.tracks}\r\n-                  id={data?.id}\r\n-                  type={LibraryType.Album}\r\n-                />\r\n-                <LikedContent songs={data?.tracks} id={albumId/>\r\n-              </>\r\n-            );\r\n-          }}\r\n-        </Palette>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AlbumDetail;\r\n"
                }
            ],
            "date": 1717458964854,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { Palette } from 'color-thief-react';\r\nimport Header from '@/components/Header';\r\nimport Image from 'next/image';\r\nimport { useParams } from 'next/navigation';\r\nimport React, { useEffect, useState } from 'react';\r\nimport LikedContent from '@/app/liked/components/LikedContent';\r\nimport Album from '@/scheme/Album';\r\nimport getAlbumById from '@/actions/album/getAlbumById';\r\nimport PageBreak from '@/components/PageBreak';\r\nimport { LibraryType } from '@/const/libraryType';\r\n\r\nconst AlbumDetail = () => {\r\n  const params = useParams<{ albumId: string }>();\r\n  const albumId = params?.albumId;\r\n  const [data, setData] = useState<Album | null>(null);\r\n\r\n  useEffect(() => {\r\n    const getAlbum = async () => {\r\n      const album = await getAlbumById(albumId as string);\r\n      if (album) {\r\n        setData(album);\r\n      } else {\r\n        console.error('No album found');\r\n      }\r\n    };\r\n    if (albumId) {\r\n      getAlbum();\r\n    }\r\n  }, [albumId]);\r\n\r\n  return (\r\n    <div className=\"flex-grow h-screen rounded-lg\">\r\n      {data && (\r\n        <Palette\r\n          src={data?.img as string}\r\n          crossOrigin=\"anonymous\"\r\n          format=\"hex\"\r\n          colorCount={3}\r\n        >\r\n          {({ data: imgColor, loading }) => {\r\n            console.log(imgColor);\r\n            if (loading) return <div>Loading...</div>;\r\n            let color;\r\n            if (imgColor) {\r\n              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n            } else {\r\n              color = '#05614C';\r\n            }\r\n            return (\r\n              <>\r\n                <Header\r\n                  title={data?.title as string}\r\n                  isContentDetail={true}\r\n                  style={{\r\n                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n                  }}\r\n                >\r\n                  <div className=\"mt-5\">\r\n                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n                        <Image\r\n                          fill\r\n                          src={data?.img as string}\r\n                          alt={data?.title as string}\r\n                          className=\"object-cover\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n                        <p className=\"hidden md:block font-semibold text-lg\">\r\n                          Album\r\n                        </p>\r\n                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n                          {data?.title}\r\n                        </h1>\r\n                        <div className=\"flex items-center gap-x-2\">\r\n                          <Image\r\n                            src={data?.artistData?.[0].avatarImg}\r\n                            alt=\"avt\"\r\n                            className=\"rounded-full h-8 w-8\"\r\n                            width={32}\r\n                            height={32}\r\n                          />\r\n                          <p className=\"text-white\">{data?.artist}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Header>\r\n                <PageBreak\r\n                  songs={data?.tracks}\r\n                  id={data?.id}\r\n                  type={LibraryType.Album}\r\n                />\r\n                <LikedContent songs={data?.tracks} id={albumId/>\r\n              </>\r\n            );\r\n          }}\r\n        </Palette>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlbumDetail;\r\n"
        }
    ]
}