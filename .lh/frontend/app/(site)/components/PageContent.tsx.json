{
    "sourceFile": "frontend/app/(site)/components/PageContent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717456302575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717456302575,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\nimport fakeGetSong from '@/actions/api/getSong';\r\nimport SongItem from '@/components/SongItem';\r\nimport useOnPlay from '@/hooks/useOnPlay';\r\nimport { Song } from '@/scheme/Song';\r\n\r\ninterface PageContentProps {\r\n  songs: Song[];\r\n}\r\n\r\nconst PageContent: React.FC<PageContentProps> = ({ songs }) => {\r\n  const onPlay = useOnPlay(songs);\r\n  const { data: session } = useSession();\r\n  console.log(session);\r\n\r\n  const gridRef = useRef(null);\r\n  const [numColumns, setNumColumns] = useState(6);\r\n\r\n  useEffect(() => {\r\n    const handleResize = (entries) => {\r\n      for (let entry of entries) {\r\n        const gridWidth = entry.contentRect.width;\r\n        const columnWidth = 205; // adjust this value as needed\r\n        setNumColumns(\r\n          Math.max(2, Math.min(9, Math.floor(gridWidth / columnWidth))),\r\n        );\r\n      }\r\n    };\r\n\r\n    const resizeObserver = new ResizeObserver(handleResize);\r\n    let grid = gridRef.current;\r\n    if (gridRef.current) {\r\n      grid = gridRef.current;\r\n      resizeObserver.observe(gridRef.current);\r\n    }\r\n    // Clean up\r\n    return () => {\r\n      resizeObserver.unobserve(grid);\r\n    };\r\n  }, []);\r\n\r\n  if (songs?.length === 0) {\r\n    // return <div className=\"mt-4 text-neutral-400\">No songs available.</div>;\r\n\r\n    // return default songs\r\n    songs = fakeGetSong().map((song) => ({\r\n      ...song,\r\n      searchTitle: '',\r\n    })) as Song[]; // Cast the return value of fakeGetSong to Song[]\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={gridRef}\r\n      className=\"grid gap-4 mt-4 max-w-[1885px]\"\r\n      style={{ gridTemplateColumns: `repeat(${numColumns}, 1fr)` }}\r\n    >\r\n      {songs?.map((item, index) => {\r\n        if (index < numColumns) {\r\n          return (\r\n            <SongItem\r\n              key={item.id}\r\n              onClick={(id: string) => onPlay(id)}\r\n              data={item}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageContent;\r\n"
        }
    ]
}