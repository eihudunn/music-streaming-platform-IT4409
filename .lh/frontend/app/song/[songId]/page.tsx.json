{
    "sourceFile": "frontend/app/song/[songId]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1717482696435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717482781098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                                 `/artist/${data?.artistData?.[0]._id}`,\r\n                               )\r\n                             }\r\n                           >\r\n-                            {data?.artistData?.[0].username}\r\n+                            {data?.artistData?.[0]?.username}\r\n                           </p>\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n"
                }
            ],
            "date": 1717482696435,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { Palette } from 'color-thief-react';\r\nimport Header from '@/components/Header';\r\nimport Image from 'next/image';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Song } from '@/scheme/Song';\r\nimport getSongBySongId from '@/actions/song/getSongBySongId';\r\nimport PageBreak from '@/components/PageBreak';\r\n\r\nconst SongDetail = () => {\r\n  const params = useParams<{ songId: string }>();\r\n  const songId = params?.songId;\r\n  const [data, setData] = useState<Song | null>(null);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const getSong = async () => {\r\n      const song = await getSongBySongId(songId as string);\r\n      if (song) {\r\n        setData(song);\r\n      } else {\r\n        console.error('No song found');\r\n      }\r\n    };\r\n    if (songId) {\r\n      getSong();\r\n    }\r\n  }, [songId]);\r\n\r\n  return (\r\n    <div \r\n    className=\"flex-grow h-full rounded-lg bg-neutral-900 w-full scrollbar-webkit overflow-y-auto\"\r\n    >\r\n      {data && (\r\n        <Palette\r\n          src={data?.img as string}\r\n          crossOrigin=\"anonymous\"\r\n          format=\"hex\"\r\n          colorCount={3}\r\n        >\r\n          {({ data: imgColor, loading }) => {\r\n            console.log(imgColor);\r\n            if (loading) return <div>Loading...</div>;\r\n            let color;\r\n            if (imgColor) {\r\n              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n            } else {\r\n              color = '#05614C';\r\n            }\r\n            return (\r\n              <>\r\n                <Header\r\n                  title={data?.title as string}\r\n                  isContentDetail={true}\r\n                  style={{\r\n                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n                  }}\r\n                >\r\n                  <div className=\"mt-5\">\r\n                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n                        <Image\r\n                          fill\r\n                          src={data?.img as string}\r\n                          alt={data?.title as string}\r\n                          className=\"object-cover\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n                        <p className=\"hidden md:block font-semibold text-lg\">\r\n                          Song\r\n                        </p>\r\n                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n                          {data?.title}\r\n                        </h1>\r\n                        <div className=\"flex items-center gap-x-2\">\r\n                          <Image\r\n                            src={\r\n                              data?.artistData\r\n                                ? data?.artistData?.[0]?.avatarImg\r\n                                : '/images/default.png'\r\n                            }\r\n                            alt=\"avt\"\r\n                            className=\"rounded-full h-8 w-8\"\r\n                            width={32}\r\n                            height={32}\r\n                          />\r\n                          <p\r\n                            className=\"text-white\"\r\n                            onClick={() =>\r\n                              router.push(\r\n                                `/artist/${data?.artistData?.[0]._id}`,\r\n                              )\r\n                            }\r\n                          >\r\n                            {data?.artistData?.[0].username}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Header>\r\n                <PageBreak song={data as Song} type={data?.type} />\r\n              </>\r\n            );\r\n          }}\r\n        </Palette>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongDetail;\r\n"
        }
    ]
}