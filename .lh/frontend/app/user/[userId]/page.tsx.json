{
    "sourceFile": "frontend/app/user/[userId]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1717473681285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717473690539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+'use client';\r\n+\r\n+import { Palette } from 'color-thief-react';\r\n+import Header from '@/components/Header';\r\n+import Image from 'next/image';\r\n+import { useParams } from 'next/navigation';\r\n+import React, { useEffect, useState } from 'react';\r\n+import PageBreak from '@/components/PageBreak';\r\n+import { UserDto } from '@/scheme/User';\r\n+import getUserById from '@/actions/user/getUserById';\r\n+import { LibraryType } from '@/const/libraryType';\r\n+import ArtistContent from '@/components/ArtistContent';\r\n+import getSongByUserId from '@/actions/song/getSongByUserId';\r\n+import { Song } from '@/scheme/Song';\r\n+\r\n+const ArtistDetail = () => {\r\n+  const params = useParams<{ userId: string }>();\r\n+  const userId = params?.userId;\r\n+  const [data, setData] = useState<UserDto | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const getUser = async () => {\r\n+      try {\r\n+        const user = await getUserById(userId as string);\r\n+        if (user) {\r\n+          setData(user);\r\n+        } else {\r\n+          console.error('No user found');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getUserById:', error);\r\n+      }\r\n+    };\r\n+    if (userId) {\r\n+      getUser();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const [songs, setSongs] = useState<Song[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchSongs = async () => {\r\n+      try {\r\n+        const songs = await getSongByUserId(userId as string);\r\n+        if (songs) {\r\n+          setSongs(songs);\r\n+        } else {\r\n+          console.error('No songs found for this user');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getSongByUserId:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (userId) {\r\n+      fetchSongs();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  return (\r\n+    <>\r\n+      {data && (\r\n+        <Palette\r\n+          src={data?.avatarImg as string}\r\n+          crossOrigin=\"anonymous\"\r\n+          format=\"hex\"\r\n+          colorCount={3}\r\n+        >\r\n+          {({ data: imgColor, loading }) => {\r\n+            console.log(imgColor);\r\n+            if (loading) return <div>Loading...</div>;\r\n+            let color;\r\n+            if (imgColor) {\r\n+              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n+            } else {\r\n+              color = '#05614C';\r\n+            }\r\n+            return (\r\n+              <>\r\n+                <Header\r\n+                  title={data?.username as string}\r\n+                  isContentDetail={true}\r\n+                  style={{\r\n+                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n+                  }}\r\n+                >\r\n+                  <div className=\"mt-5\">\r\n+                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n+                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n+                        <Image\r\n+                          fill\r\n+                          sizes=\"240\"\r\n+                          src={\r\n+                            data?.avatarImg\r\n+                              ? (data?.avatarImg as string)\r\n+                              : '/images/default.png'\r\n+                          }\r\n+                          alt={data?.username as string}\r\n+                          className=\"object-cover\"\r\n+                        />\r\n+                      </div>\r\n+                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n+                        <p className=\"hidden md:block font-semibold text-lg\">\r\n+                          Verified Artist\r\n+                        </p>\r\n+                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n+                          {data?.username}\r\n+                        </h1>\r\n+                        <div className=\"flex items-center gap-x-2\">\r\n+                          <p className=\"text-white\"></p>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </Header>\r\n+                <PageBreak\r\n+                  type={LibraryType.Artist}\r\n+                  id={userId}\r\n+                  songs={songs}\r\n+                />\r\n+                <div className=\"\">\r\n+                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n+                  <ArtistContent songs={songs} />\r\n+                </div>\r\n+              </>\r\n+            );\r\n+          }}\r\n+        </Palette>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717473697924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,138 +131,4 @@\n   );\r\n };\r\n \r\n export default ArtistDetail;\r\n-'use client';\r\n-\r\n-import { Palette } from 'color-thief-react';\r\n-import Header from '@/components/Header';\r\n-import Image from 'next/image';\r\n-import { useParams } from 'next/navigation';\r\n-import React, { useEffect, useState } from 'react';\r\n-import PageBreak from '@/components/PageBreak';\r\n-import { UserDto } from '@/scheme/User';\r\n-import getUserById from '@/actions/user/getUserById';\r\n-import { LibraryType } from '@/const/libraryType';\r\n-import ArtistContent from '@/components/ArtistContent';\r\n-import getSongByUserId from '@/actions/song/getSongByUserId';\r\n-import { Song } from '@/scheme/Song';\r\n-\r\n-const ArtistDetail = () => {\r\n-  const params = useParams<{ artistId: string }>();\r\n-  const artistId = params?.artistId;\r\n-  const [data, setData] = useState<UserDto | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const getUser = async () => {\r\n-      try {\r\n-        const user = await getUserById(artistId as string);\r\n-        if (user) {\r\n-          setData(user);\r\n-        } else {\r\n-          console.error('No user found');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getUserById:', error);\r\n-      }\r\n-    };\r\n-    if (artistId) {\r\n-      getUser();\r\n-    }\r\n-  }, [artistId]);\r\n-\r\n-  const [songs, setSongs] = useState<Song[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchSongs = async () => {\r\n-      try {\r\n-        const songs = await getSongByUserId(artistId as string);\r\n-        if (songs) {\r\n-          setSongs(songs);\r\n-        } else {\r\n-          console.error('No songs found for this user');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getSongByUserId:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (artistId) {\r\n-      fetchSongs();\r\n-    }\r\n-  }, [artistId]);\r\n-\r\n-  return (\r\n-    <>\r\n-      {data && (\r\n-        <Palette\r\n-          src={data?.avatarImg as string}\r\n-          crossOrigin=\"anonymous\"\r\n-          format=\"hex\"\r\n-          colorCount={3}\r\n-        >\r\n-          {({ data: imgColor, loading }) => {\r\n-            console.log(imgColor);\r\n-            if (loading) return <div>Loading...</div>;\r\n-            let color;\r\n-            if (imgColor) {\r\n-              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n-            } else {\r\n-              color = '#05614C';\r\n-            }\r\n-            return (\r\n-              <>\r\n-                <Header\r\n-                  title={data?.username as string}\r\n-                  isContentDetail={true}\r\n-                  style={{\r\n-                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n-                  }}\r\n-                >\r\n-                  <div className=\"mt-5\">\r\n-                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n-                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n-                        <Image\r\n-                          fill\r\n-                          sizes=\"240\"\r\n-                          src={\r\n-                            data?.avatarImg\r\n-                              ? (data?.avatarImg as string)\r\n-                              : '/images/default.png'\r\n-                          }\r\n-                          alt={data?.username as string}\r\n-                          className=\"object-cover\"\r\n-                        />\r\n-                      </div>\r\n-                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n-                        <p className=\"hidden md:block font-semibold text-lg\">\r\n-                          Verified Artist\r\n-                        </p>\r\n-                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n-                          {data?.username}\r\n-                        </h1>\r\n-                        <div className=\"flex items-center gap-x-2\">\r\n-                          <p className=\"text-white\"></p>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </Header>\r\n-                <PageBreak\r\n-                  type={LibraryType.Artist}\r\n-                  id={artistId}\r\n-                  songs={songs}\r\n-                />\r\n-                <div className=\"\">\r\n-                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n-                  <ArtistContent songs={songs} />\r\n-                </div>\r\n-              </>\r\n-            );\r\n-          }}\r\n-        </Palette>\r\n-      )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717473979972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+'use client';\r\n+\r\n+import { Palette } from 'color-thief-react';\r\n+import Header from '@/components/Header';\r\n+import Image from 'next/image';\r\n+import { useParams } from 'next/navigation';\r\n+import React, { useEffect, useState } from 'react';\r\n+import PageBreak from '@/components/PageBreak';\r\n+import { UserDto } from '@/scheme/User';\r\n+import getUserById from '@/actions/user/getUserById';\r\n+import { LibraryType } from '@/const/libraryType';\r\n+import ArtistContent from '@/components/ArtistContent';\r\n+import getSongByUserId from '@/actions/song/getSongByUserId';\r\n+import { Song } from '@/scheme/Song';\r\n+\r\n+const ArtistDetail = () => {\r\n+  const params = useParams<{ userId: string }>();\r\n+  const userId = params?.userId;\r\n+  const [data, setData] = useState<UserDto | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const getUser = async () => {\r\n+      try {\r\n+        const user = await getUserById(userId as string);\r\n+        if (user) {\r\n+          setData(user);\r\n+        } else {\r\n+          console.error('No user found');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getUserById:', error);\r\n+      }\r\n+    };\r\n+    if (userId) {\r\n+      getUser();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const [songs, setSongs] = useState<Song[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchSongs = async () => {\r\n+      try {\r\n+        const songs = await getSongByUserId(userId as string);\r\n+        if (songs) {\r\n+          setSongs(songs);\r\n+        } else {\r\n+          console.error('No songs found for this user');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getSongByUserId:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (userId) {\r\n+      fetchSongs();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  return (\r\n+    <>\r\n+      {data && (\r\n+        <Palette\r\n+          src={data?.avatarImg as string}\r\n+          crossOrigin=\"anonymous\"\r\n+          format=\"hex\"\r\n+          colorCount={3}\r\n+        >\r\n+          {({ data: imgColor, loading }) => {\r\n+            console.log(imgColor);\r\n+            if (loading) return <div>Loading...</div>;\r\n+            let color;\r\n+            if (imgColor) {\r\n+              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n+            } else {\r\n+              color = '#05614C';\r\n+            }\r\n+            return (\r\n+              <>\r\n+                <Header\r\n+                  title={data?.username as string}\r\n+                  isContentDetail={true}\r\n+                  style={{\r\n+                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n+                  }}\r\n+                >\r\n+                  <div className=\"mt-5\">\r\n+                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n+                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n+                        <Image\r\n+                          fill\r\n+                          sizes=\"240\"\r\n+                          src={\r\n+                            data?.avatarImg\r\n+                              ? (data?.avatarImg as string)\r\n+                              : '/images/default.png'\r\n+                          }\r\n+                          alt={data?.username as string}\r\n+                          className=\"object-cover\"\r\n+                        />\r\n+                      </div>\r\n+                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n+                        <p className=\"hidden md:block font-semibold text-lg\">\r\n+                          Verified Artist\r\n+                        </p>\r\n+                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n+                          {data?.username}\r\n+                        </h1>\r\n+                        <div className=\"flex items-center gap-x-2\">\r\n+                          <p className=\"text-white\"></p>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </Header>\r\n+                <PageBreak\r\n+                  type={LibraryType.Artist}\r\n+                  id={userId}\r\n+                  songs={songs}\r\n+                />\r\n+                <div className=\"\">\r\n+                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n+                  <ArtistContent songs={songs} limit />\r\n+                </div>\r\n+              </>\r\n+            );\r\n+          }}\r\n+        </Palette>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717474160669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,142 +56,33 @@\n       fetchSongs();\r\n     }\r\n   }, [userId]);\r\n \r\n-  return (\r\n-    <>\r\n-      {data && (\r\n-        <Palette\r\n-          src={data?.avatarImg as string}\r\n-          crossOrigin=\"anonymous\"\r\n-          format=\"hex\"\r\n-          colorCount={3}\r\n-        >\r\n-          {({ data: imgColor, loading }) => {\r\n-            console.log(imgColor);\r\n-            if (loading) return <div>Loading...</div>;\r\n-            let color;\r\n-            if (imgColor) {\r\n-              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n-            } else {\r\n-              color = '#05614C';\r\n-            }\r\n-            return (\r\n-              <>\r\n-                <Header\r\n-                  title={data?.username as string}\r\n-                  isContentDetail={true}\r\n-                  style={{\r\n-                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n-                  }}\r\n-                >\r\n-                  <div className=\"mt-5\">\r\n-                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n-                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n-                        <Image\r\n-                          fill\r\n-                          sizes=\"240\"\r\n-                          src={\r\n-                            data?.avatarImg\r\n-                              ? (data?.avatarImg as string)\r\n-                              : '/images/default.png'\r\n-                          }\r\n-                          alt={data?.username as string}\r\n-                          className=\"object-cover\"\r\n-                        />\r\n-                      </div>\r\n-                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n-                        <p className=\"hidden md:block font-semibold text-lg\">\r\n-                          Verified Artist\r\n-                        </p>\r\n-                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n-                          {data?.username}\r\n-                        </h1>\r\n-                        <div className=\"flex items-center gap-x-2\">\r\n-                          <p className=\"text-white\"></p>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </Header>\r\n-                <PageBreak\r\n-                  type={LibraryType.Artist}\r\n-                  id={userId}\r\n-                  songs={songs}\r\n-                />\r\n-                <div className=\"\">\r\n-                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n-                  <ArtistContent songs={songs} limit />\r\n-                </div>\r\n-              </>\r\n-            );\r\n-          }}\r\n-        </Palette>\r\n-      )}\r\n-    </>\r\n-  );\r\n-};\r\n+  const handleFileUpload = async (event) => {\r\n+    const file = event.target.files[0];\r\n+    const formData = new FormData();\r\n+    formData.append('avatar', file);\r\n \r\n-export default ArtistDetail;\r\n-'use client';\r\n+    try {\r\n+      const response = await axios.post('/api/upload-avatar', formData, {\r\n+        headers: {\r\n+          'Content-Type': 'multipart/form-data',\r\n+        },\r\n+      });\r\n \r\n-import { Palette } from 'color-thief-react';\r\n-import Header from '@/components/Header';\r\n-import Image from 'next/image';\r\n-import { useParams } from 'next/navigation';\r\n-import React, { useEffect, useState } from 'react';\r\n-import PageBreak from '@/components/PageBreak';\r\n-import { UserDto } from '@/scheme/User';\r\n-import getUserById from '@/actions/user/getUserById';\r\n-import { LibraryType } from '@/const/libraryType';\r\n-import ArtistContent from '@/components/ArtistContent';\r\n-import getSongByUserId from '@/actions/song/getSongByUserId';\r\n-import { Song } from '@/scheme/Song';\r\n-\r\n-const ArtistDetail = () => {\r\n-  const params = useParams<{ userId: string }>();\r\n-  const userId = params?.userId;\r\n-  const [data, setData] = useState<UserDto | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const getUser = async () => {\r\n-      try {\r\n-        const user = await getUserById(userId as string);\r\n-        if (user) {\r\n-          setData(user);\r\n-        } else {\r\n-          console.error('No user found');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getUserById:', error);\r\n+      if (response.data.success) {\r\n+        setData((prevData) => ({\r\n+          ...prevData,\r\n+          avatarImg: response.data.avatarUrl,\r\n+        }));\r\n+      } else {\r\n+        console.error('Failed to upload avatar');\r\n       }\r\n-    };\r\n-    if (userId) {\r\n-      getUser();\r\n+    } catch (error) {\r\n+      console.error('Error uploading avatar:', error);\r\n     }\r\n-  }, [userId]);\r\n+  };\r\n \r\n-  const [songs, setSongs] = useState<Song[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchSongs = async () => {\r\n-      try {\r\n-        const songs = await getSongByUserId(userId as string);\r\n-        if (songs) {\r\n-          setSongs(songs);\r\n-        } else {\r\n-          console.error('No songs found for this user');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getSongByUserId:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (userId) {\r\n-      fetchSongs();\r\n-    }\r\n-  }, [userId]);\r\n-\r\n   return (\r\n     <>\r\n       {data && (\r\n         <Palette\r\n@@ -253,9 +144,9 @@\n                   songs={songs}\r\n                 />\r\n                 <div className=\"\">\r\n                   <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n-                  <ArtistContent songs={songs} />\r\n+                  <ArtistContent songs={songs} limit={5} />\r\n                 </div>\r\n               </>\r\n             );\r\n           }}\r\n"
                },
                {
                    "date": 1717474351094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     const formData = new FormData();\r\n     formData.append('avatar', file);\r\n \r\n     try {\r\n-      const response = await axios.post('/api/upload-avatar', formData, {\r\n+      const response = await axiosClient.post('/api/upload-avatar', formData, {\r\n         headers: {\r\n           'Content-Type': 'multipart/form-data',\r\n         },\r\n       });\r\n"
                },
                {
                    "date": 1717474615837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     const formData = new FormData();\r\n     formData.append('avatar', file);\r\n \r\n     try {\r\n-      const response = await axiosClient.post('/api/upload-avatar', formData, {\r\n+      const response = await axiosClient.post('/user/upload-avatar', formData, {\r\n         headers: {\r\n           'Content-Type': 'multipart/form-data',\r\n         },\r\n       });\r\n"
                },
                {
                    "date": 1717474623456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+'use client';\r\n+\r\n+import { Palette } from 'color-thief-react';\r\n+import Header from '@/components/Header';\r\n+import Image from 'next/image';\r\n+import { useParams } from 'next/navigation';\r\n+import React, { useEffect, useState } from 'react';\r\n+import PageBreak from '@/components/PageBreak';\r\n+import { UserDto } from '@/scheme/User';\r\n+import getUserById from '@/actions/user/getUserById';\r\n+import { LibraryType } from '@/const/libraryType';\r\n+import ArtistContent from '@/components/ArtistContent';\r\n+import getSongByUserId from '@/actions/song/getSongByUserId';\r\n+import { Song } from '@/scheme/Song';\r\n+import axiosClient from '@/app/_utils/GlobalApi';\r\n+\r\n+const ArtistDetail = () => {\r\n+  const params = useParams<{ userId: string }>();\r\n+  const userId = params?.userId;\r\n+  const [data, setData] = useState<UserDto | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const getUser = async () => {\r\n+      try {\r\n+        const user = await getUserById(userId as string);\r\n+        if (user) {\r\n+          setData(user);\r\n+        } else {\r\n+          console.error('No user found');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getUserById:', error);\r\n+      }\r\n+    };\r\n+    if (userId) {\r\n+      getUser();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const [songs, setSongs] = useState<Song[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchSongs = async () => {\r\n+      try {\r\n+        const songs = await getSongByUserId(userId as string);\r\n+        if (songs) {\r\n+          setSongs(songs);\r\n+        } else {\r\n+          console.error('No songs found for this user');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getSongByUserId:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (userId) {\r\n+      fetchSongs();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const handleFileUpload = async (event) => {\r\n+    const file = event.target.files[0];\r\n+    const formData = new FormData();\r\n+    formData.append('avatar', file);\r\n+\r\n+    try {\r\n+      const response = await axiosClient.post('/user/update/`, formData, {\r\n+        headers: {\r\n+          'Content-Type': 'multipart/form-data',\r\n+        },\r\n+      });\r\n+\r\n+      if (response.data.success) {\r\n+        setData((prevData) => ({\r\n+          ...prevData,\r\n+          avatarImg: response.data.avatarUrl,\r\n+        }));\r\n+      } else {\r\n+        console.error('Failed to upload avatar');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error uploading avatar:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      {data && (\r\n+        <Palette\r\n+          src={data?.avatarImg as string}\r\n+          crossOrigin=\"anonymous\"\r\n+          format=\"hex\"\r\n+          colorCount={3}\r\n+        >\r\n+          {({ data: imgColor, loading }) => {\r\n+            console.log(imgColor);\r\n+            if (loading) return <div>Loading...</div>;\r\n+            let color;\r\n+            if (imgColor) {\r\n+              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n+            } else {\r\n+              color = '#05614C';\r\n+            }\r\n+            return (\r\n+              <>\r\n+                <Header\r\n+                  title={data?.username as string}\r\n+                  isContentDetail={true}\r\n+                  style={{\r\n+                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n+                  }}\r\n+                >\r\n+                  <div className=\"mt-5\">\r\n+                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n+                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n+                        <Image\r\n+                          fill\r\n+                          sizes=\"240\"\r\n+                          src={\r\n+                            data?.avatarImg\r\n+                              ? (data?.avatarImg as string)\r\n+                              : '/images/default.png'\r\n+                          }\r\n+                          alt={data?.username as string}\r\n+                          className=\"object-cover\"\r\n+                        />\r\n+                      </div>\r\n+                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n+                        <p className=\"hidden md:block font-semibold text-lg\">\r\n+                          Verified Artist\r\n+                        </p>\r\n+                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n+                          {data?.username}\r\n+                        </h1>\r\n+                        <div className=\"flex items-center gap-x-2\">\r\n+                          <p className=\"text-white\"></p>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </Header>\r\n+                <PageBreak\r\n+                  type={LibraryType.Artist}\r\n+                  id={userId}\r\n+                  songs={songs}\r\n+                />\r\n+                <div className=\"\">\r\n+                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n+                  <ArtistContent songs={songs} limit={5} />\r\n+                </div>\r\n+              </>\r\n+            );\r\n+          }}\r\n+        </Palette>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717474634288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     const formData = new FormData();\r\n     formData.append('avatar', file);\r\n \r\n     try {\r\n-      const response = await axiosClient.post('/user/update/`, formData, {\r\n+      const response = await axiosClient.post(`/user/update/${userId}`, formData, {\r\n         headers: {\r\n           'Content-Type': 'multipart/form-data',\r\n         },\r\n       });\r\n@@ -157,163 +157,4 @@\n   );\r\n };\r\n \r\n export default ArtistDetail;\r\n-'use client';\r\n-\r\n-import { Palette } from 'color-thief-react';\r\n-import Header from '@/components/Header';\r\n-import Image from 'next/image';\r\n-import { useParams } from 'next/navigation';\r\n-import React, { useEffect, useState } from 'react';\r\n-import PageBreak from '@/components/PageBreak';\r\n-import { UserDto } from '@/scheme/User';\r\n-import getUserById from '@/actions/user/getUserById';\r\n-import { LibraryType } from '@/const/libraryType';\r\n-import ArtistContent from '@/components/ArtistContent';\r\n-import getSongByUserId from '@/actions/song/getSongByUserId';\r\n-import { Song } from '@/scheme/Song';\r\n-\r\n-const ArtistDetail = () => {\r\n-  const params = useParams<{ userId: string }>();\r\n-  const userId = params?.userId;\r\n-  const [data, setData] = useState<UserDto | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    const getUser = async () => {\r\n-      try {\r\n-        const user = await getUserById(userId as string);\r\n-        if (user) {\r\n-          setData(user);\r\n-        } else {\r\n-          console.error('No user found');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getUserById:', error);\r\n-      }\r\n-    };\r\n-    if (userId) {\r\n-      getUser();\r\n-    }\r\n-  }, [userId]);\r\n-\r\n-  const [songs, setSongs] = useState<Song[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchSongs = async () => {\r\n-      try {\r\n-        const songs = await getSongByUserId(userId as string);\r\n-        if (songs) {\r\n-          setSongs(songs);\r\n-        } else {\r\n-          console.error('No songs found for this user');\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error calling getSongByUserId:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (userId) {\r\n-      fetchSongs();\r\n-    }\r\n-  }, [userId]);\r\n-\r\n-  const handleFileUpload = async (event) => {\r\n-    const file = event.target.files[0];\r\n-    const formData = new FormData();\r\n-    formData.append('avatar', file);\r\n-\r\n-    try {\r\n-      const response = await axiosClient.post('/user/upload-avatar', formData, {\r\n-        headers: {\r\n-          'Content-Type': 'multipart/form-data',\r\n-        },\r\n-      });\r\n-\r\n-      if (response.data.success) {\r\n-        setData((prevData) => ({\r\n-          ...prevData,\r\n-          avatarImg: response.data.avatarUrl,\r\n-        }));\r\n-      } else {\r\n-        console.error('Failed to upload avatar');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error uploading avatar:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      {data && (\r\n-        <Palette\r\n-          src={data?.avatarImg as string}\r\n-          crossOrigin=\"anonymous\"\r\n-          format=\"hex\"\r\n-          colorCount={3}\r\n-        >\r\n-          {({ data: imgColor, loading }) => {\r\n-            console.log(imgColor);\r\n-            if (loading) return <div>Loading...</div>;\r\n-            let color;\r\n-            if (imgColor) {\r\n-              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n-            } else {\r\n-              color = '#05614C';\r\n-            }\r\n-            return (\r\n-              <>\r\n-                <Header\r\n-                  title={data?.username as string}\r\n-                  isContentDetail={true}\r\n-                  style={{\r\n-                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n-                  }}\r\n-                >\r\n-                  <div className=\"mt-5\">\r\n-                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n-                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n-                        <Image\r\n-                          fill\r\n-                          sizes=\"240\"\r\n-                          src={\r\n-                            data?.avatarImg\r\n-                              ? (data?.avatarImg as string)\r\n-                              : '/images/default.png'\r\n-                          }\r\n-                          alt={data?.username as string}\r\n-                          className=\"object-cover\"\r\n-                        />\r\n-                      </div>\r\n-                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n-                        <p className=\"hidden md:block font-semibold text-lg\">\r\n-                          Verified Artist\r\n-                        </p>\r\n-                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n-                          {data?.username}\r\n-                        </h1>\r\n-                        <div className=\"flex items-center gap-x-2\">\r\n-                          <p className=\"text-white\"></p>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </Header>\r\n-                <PageBreak\r\n-                  type={LibraryType.Artist}\r\n-                  id={userId}\r\n-                  songs={songs}\r\n-                />\r\n-                <div className=\"\">\r\n-                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n-                  <ArtistContent songs={songs} limit={5} />\r\n-                </div>\r\n-              </>\r\n-            );\r\n-          }}\r\n-        </Palette>\r\n-      )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717474665604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n                           {data?.username}\r\n                         </h1>\r\n                         <div className=\"flex items-center gap-x-2\">\r\n                           <p className=\"text-white\"></p>\r\n+                          <input type=\"file\" onChange={handleFileUpload} /\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n"
                },
                {
                    "date": 1717474676467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n                           {data?.username}\r\n                         </h1>\r\n                         <div className=\"flex items-center gap-x-2\">\r\n                           <p className=\"text-white\"></p>\r\n-                          <input type=\"file\" onChange={handleFileUpload} /\r\n+                          <input type=\"file\" onChange={handleFileUpload} />\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n"
                },
                {
                    "date": 1717474688655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n                         <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n                           {data?.username}\r\n                         </h1>\r\n                         <div className=\"flex items-center gap-x-2\">\r\n-                          <p className=\"text-white\"></p>\r\n+                          <p className=\"text-white\">Edit</p>\r\n                           <input type=\"file\" onChange={handleFileUpload} />\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n"
                },
                {
                    "date": 1717474800979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n                           {data?.username}\r\n                         </h1>\r\n                         <div className=\"flex items-center gap-x-2\">\r\n                           <p className=\"text-white\">Edit</p>\r\n-                          <input type=\"file\" onChange={handleFileUpload} />\r\n+                          {isEditing && <input type=\"file\" onChange={handleFileUpload} />}\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n"
                },
                {
                    "date": 1717474812915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+'use client';\r\n+\r\n+import { Palette } from 'color-thief-react';\r\n+import Header from '@/components/Header';\r\n+import Image from 'next/image';\r\n+import { useParams } from 'next/navigation';\r\n+import React, { useEffect, useState } from 'react';\r\n+import PageBreak from '@/components/PageBreak';\r\n+import { UserDto } from '@/scheme/User';\r\n+import getUserById from '@/actions/user/getUserById';\r\n+import { LibraryType } from '@/const/libraryType';\r\n+import ArtistContent from '@/components/ArtistContent';\r\n+import getSongByUserId from '@/actions/song/getSongByUserId';\r\n+import { Song } from '@/scheme/Song';\r\n+import axiosClient from '@/app/_utils/GlobalApi';\r\n+\r\n+const ArtistDetail = () => {\r\n+  const params = useParams<{ userId: string }>();\r\n+  const userId = params?.userId;\r\n+  const [data, setData] = useState<UserDto | null>(null);\r\n+  \r\n+\r\n+  useEffect(() => {\r\n+    const getUser = async () => {\r\n+      try {\r\n+        const user = await getUserById(userId as string);\r\n+        if (user) {\r\n+          setData(user);\r\n+        } else {\r\n+          console.error('No user found');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getUserById:', error);\r\n+      }\r\n+    };\r\n+    if (userId) {\r\n+      getUser();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const [songs, setSongs] = useState<Song[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchSongs = async () => {\r\n+      try {\r\n+        const songs = await getSongByUserId(userId as string);\r\n+        if (songs) {\r\n+          setSongs(songs);\r\n+        } else {\r\n+          console.error('No songs found for this user');\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error calling getSongByUserId:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (userId) {\r\n+      fetchSongs();\r\n+    }\r\n+  }, [userId]);\r\n+\r\n+  const handleFileUpload = async (event) => {\r\n+    const file = event.target.files[0];\r\n+    const formData = new FormData();\r\n+    formData.append('avatar', file);\r\n+\r\n+    try {\r\n+      const response = await axiosClient.post(\r\n+        `/user/update/${userId}`,\r\n+        formData,\r\n+        {\r\n+          headers: {\r\n+            'Content-Type': 'multipart/form-data',\r\n+          },\r\n+        },\r\n+      );\r\n+\r\n+      if (response.data.success) {\r\n+        setData((prevData) => ({\r\n+          ...prevData,\r\n+          avatarImg: response.data.avatarUrl,\r\n+        }));\r\n+      } else {\r\n+        console.error('Failed to upload avatar');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error uploading avatar:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      {data && (\r\n+        <Palette\r\n+          src={data?.avatarImg as string}\r\n+          crossOrigin=\"anonymous\"\r\n+          format=\"hex\"\r\n+          colorCount={3}\r\n+        >\r\n+          {({ data: imgColor, loading }) => {\r\n+            console.log(imgColor);\r\n+            if (loading) return <div>Loading...</div>;\r\n+            let color;\r\n+            if (imgColor) {\r\n+              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n+            } else {\r\n+              color = '#05614C';\r\n+            }\r\n+            return (\r\n+              <>\r\n+                <Header\r\n+                  title={data?.username as string}\r\n+                  isContentDetail={true}\r\n+                  style={{\r\n+                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n+                  }}\r\n+                >\r\n+                  <div className=\"mt-5\">\r\n+                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n+                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n+                        <Image\r\n+                          fill\r\n+                          sizes=\"240\"\r\n+                          src={\r\n+                            data?.avatarImg\r\n+                              ? (data?.avatarImg as string)\r\n+                              : '/images/default.png'\r\n+                          }\r\n+                          alt={data?.username as string}\r\n+                          className=\"object-cover\"\r\n+                        />\r\n+                      </div>\r\n+                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n+                        <p className=\"hidden md:block font-semibold text-lg\">\r\n+                          Verified Artist\r\n+                        </p>\r\n+                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n+                          {data?.username}\r\n+                        </h1>\r\n+                        <div className=\"flex items-center gap-x-2\">\r\n+                          <p className=\"text-white\">Edit</p>\r\n+                          {isEditing && <input type=\"file\" onChange={handleFileUpload} />}\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </Header>\r\n+                <PageBreak\r\n+                  type={LibraryType.Artist}\r\n+                  id={userId}\r\n+                  songs={songs}\r\n+                />\r\n+                <div className=\"\">\r\n+                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n+                  <ArtistContent songs={songs} limit={5} />\r\n+                </div>\r\n+              </>\r\n+            );\r\n+          }}\r\n+        </Palette>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ArtistDetail;\r\n"
                },
                {
                    "date": 1717474831718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,11 @@\n                         <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n                           {data?.username}\r\n                         </h1>\r\n                         <div className=\"flex items-center gap-x-2\">\r\n-                          <p className=\"text-white\">Edit</p>\r\n+                        <p className=\"text-white\" onClick={() => setIsEditing(!isEditing)}>\r\n+              Edit\r\n+            </p>\r\n                           {isEditing && (\r\n                             <input type=\"file\" onChange={handleFileUpload} />\r\n                           )}\r\n                         </div>\r\n"
                },
                {
                    "date": 1717474873976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n                           <p\r\n                             className=\"text-white\"\r\n                             onClick={() => setIsEditing(!isEditing)}\r\n                           >\r\n-                            Edit\r\n+                            Edit profile\r\n                           </p>\r\n                           {isEditing && (\r\n                             <input type=\"file\" onChange={handleFileUpload} />\r\n                           )}\r\n"
                }
            ],
            "date": 1717473681285,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { Palette } from 'color-thief-react';\r\nimport Header from '@/components/Header';\r\nimport Image from 'next/image';\r\nimport { useParams } from 'next/navigation';\r\nimport React, { useEffect, useState } from 'react';\r\nimport PageBreak from '@/components/PageBreak';\r\nimport { UserDto } from '@/scheme/User';\r\nimport getUserById from '@/actions/user/getUserById';\r\nimport { LibraryType } from '@/const/libraryType';\r\nimport ArtistContent from '@/components/ArtistContent';\r\nimport getSongByUserId from '@/actions/song/getSongByUserId';\r\nimport { Song } from '@/scheme/Song';\r\n\r\nconst ArtistDetail = () => {\r\n  const params = useParams<{ artistId: string }>();\r\n  const artistId = params?.artistId;\r\n  const [data, setData] = useState<UserDto | null>(null);\r\n\r\n  useEffect(() => {\r\n    const getUser = async () => {\r\n      try {\r\n        const user = await getUserById(artistId as string);\r\n        if (user) {\r\n          setData(user);\r\n        } else {\r\n          console.error('No user found');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error calling getUserById:', error);\r\n      }\r\n    };\r\n    if (artistId) {\r\n      getUser();\r\n    }\r\n  }, [artistId]);\r\n\r\n  const [songs, setSongs] = useState<Song[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchSongs = async () => {\r\n      try {\r\n        const songs = await getSongByUserId(artistId as string);\r\n        if (songs) {\r\n          setSongs(songs);\r\n        } else {\r\n          console.error('No songs found for this user');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error calling getSongByUserId:', error);\r\n      }\r\n    };\r\n\r\n    if (artistId) {\r\n      fetchSongs();\r\n    }\r\n  }, [artistId]);\r\n\r\n  return (\r\n    <>\r\n      {data && (\r\n        <Palette\r\n          src={data?.avatarImg as string}\r\n          crossOrigin=\"anonymous\"\r\n          format=\"hex\"\r\n          colorCount={3}\r\n        >\r\n          {({ data: imgColor, loading }) => {\r\n            console.log(imgColor);\r\n            if (loading) return <div>Loading...</div>;\r\n            let color;\r\n            if (imgColor) {\r\n              color = imgColor[0] > '#202020' ? imgColor[0] : imgColor[1];\r\n            } else {\r\n              color = '#05614C';\r\n            }\r\n            return (\r\n              <>\r\n                <Header\r\n                  title={data?.username as string}\r\n                  isContentDetail={true}\r\n                  style={{\r\n                    backgroundImage: `linear-gradient(to bottom, ${color} var(--tw-gradient-from-position), #191b1d var(--tw-gradient-from-position) )`,\r\n                  }}\r\n                >\r\n                  <div className=\"mt-5\">\r\n                    <div className=\"flex flex-col md:flex-row items-center gap-x-5\">\r\n                      <div className=\"relative h-44 w-44 lg:h-60 lg:w-60\">\r\n                        <Image\r\n                          fill\r\n                          sizes=\"240\"\r\n                          src={\r\n                            data?.avatarImg\r\n                              ? (data?.avatarImg as string)\r\n                              : '/images/default.png'\r\n                          }\r\n                          alt={data?.username as string}\r\n                          className=\"object-cover\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex flex-col gap-y-2 mt-4 md:mt-0\">\r\n                        <p className=\"hidden md:block font-semibold text-lg\">\r\n                          Verified Artist\r\n                        </p>\r\n                        <h1 className=\"text-white text-4xl sm:text-5xl lg:text-7xl font-extrabold\">\r\n                          {data?.username}\r\n                        </h1>\r\n                        <div className=\"flex items-center gap-x-2\">\r\n                          <p className=\"text-white\"></p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Header>\r\n                <PageBreak\r\n                  type={LibraryType.Artist}\r\n                  id={artistId}\r\n                  songs={songs}\r\n                />\r\n                <div className=\"\">\r\n                  <h1 className=\"text-2xl font-bold mx-4\">Popular</h1>\r\n                  <ArtistContent songs={songs} />\r\n                </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Palette>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ArtistDetail;\r\n"
        }
    ]
}