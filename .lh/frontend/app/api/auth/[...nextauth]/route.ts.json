{
    "sourceFile": "frontend/app/api/auth/[...nextauth]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1717454801379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717454807140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,5 +99,7 @@\n     },\r\n   },\r\n });\r\n \r\n+const handler = NextAuth(\r\n+\r\n export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1717454817770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import NextAuth from 'next-auth/next';\r\n+import GoogleProvider from 'next-auth/providers/google';\r\n+import GithubProvider from 'next-auth/providers/github';\r\n+import CredentialsProvider from 'next-auth/providers/credentials';\r\n+import { connectMongoDB } from '@/lib/mongodb';\r\n+import bcrypt from 'bcrypt';\r\n+import User from '@/scheme/User';\r\n+\r\n+const {\r\n+  providers: [\r\n+    GoogleProvider({\r\n+      clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n+    }),\r\n+    GithubProvider({\r\n+      clientId: process.env.GITHUB_CLIENT_ID as string,\r\n+      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\r\n+    }),\r\n+    CredentialsProvider({\r\n+      name: 'credentials',\r\n+      credentials: {\r\n+        email: { label: 'Email', type: 'email' },\r\n+        password: { label: 'Password', type: 'password' },\r\n+      },\r\n+      async authorize(credentials) {\r\n+        await connectMongoDB();\r\n+\r\n+        if (!credentials?.email || !credentials?.password) {\r\n+          throw new Error('Please enter your email and password');\r\n+        }\r\n+\r\n+        const user = await User.findOne({ email: credentials?.email });\r\n+        console.log('User found:', user);\r\n+\r\n+        if (!user || !user?.password) {\r\n+          throw new Error('No user found');\r\n+        }\r\n+\r\n+        const isValidPassword = await bcrypt.compare(\r\n+          credentials.password,\r\n+          user.password,\r\n+        );\r\n+        console.log('Password is valid:', isValidPassword);\r\n+\r\n+        if (!isValidPassword) {\r\n+          throw new Error('Invalid password');\r\n+        }\r\n+        return user;\r\n+      },\r\n+    }),\r\n+  ],\r\n+  secret: process.env.SECRET,\r\n+  session: {\r\n+    strategy: 'jwt',\r\n+  },\r\n+  debug: process.env.NODE_ENV === 'development',\r\n+  callbacks: {\r\n+    async jwt({ token, user }) {\r\n+      await connectMongoDB();\r\n+      const userData = await User.findOne({ email: user?.email });\r\n+      return { ...token, ...userData, ...user };\r\n+    },\r\n+    async session({ session, token }) {\r\n+      session.user = token;\r\n+      return session;\r\n+    },\r\n+    async signIn({ user, account }) {\r\n+      if (account?.provider === 'google' || account?.provider === 'github') {\r\n+        const { name, email, image, picture } = user;\r\n+        try {\r\n+          await connectMongoDB();\r\n+\r\n+          const userExists = await User.findOne({ email });\r\n+\r\n+          if (!userExists) {\r\n+            const res = await fetch('http://localhost:3000/api/user', {\r\n+              method: 'POST',\r\n+              body: JSON.stringify({ name, email, image, picture }),\r\n+              headers: {\r\n+                'Content-Type': 'application/json',\r\n+              },\r\n+            });\r\n+            if (res.ok) {\r\n+              const data = await res.json();\r\n+              console.log('data:', data);\r\n+              return data.user;\r\n+            }\r\n+          }\r\n+          console.log(userExists);\r\n+          return userExists;\r\n+        } catch (error) {\r\n+          console.error(error);\r\n+        }\r\n+      }\r\n+      return true;\r\n+    },\r\n+    async redirect({ url, baseUrl }) {\r\n+      return baseUrl;\r\n+    },\r\n+  },\r\n+};\r\n+\r\n+const handler = NextAuth()\r\n+\r\n+export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1717454824995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { connectMongoDB } from '@/lib/mongodb';\r\n import bcrypt from 'bcrypt';\r\n import User from '@/scheme/User';\r\n \r\n-const {\r\n+const AuthOprions = {\r\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n@@ -102,109 +102,4 @@\n \r\n const handler = NextAuth()\r\n \r\n export { handler as GET, handler as POST };\r\n-import NextAuth from 'next-auth/next';\r\n-import GoogleProvider from 'next-auth/providers/google';\r\n-import GithubProvider from 'next-auth/providers/github';\r\n-import CredentialsProvider from 'next-auth/providers/credentials';\r\n-import { connectMongoDB } from '@/lib/mongodb';\r\n-import bcrypt from 'bcrypt';\r\n-import User from '@/scheme/User';\r\n-\r\n-{\r\n-  providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n-    }),\r\n-    GithubProvider({\r\n-      clientId: process.env.GITHUB_CLIENT_ID as string,\r\n-      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\r\n-    }),\r\n-    CredentialsProvider({\r\n-      name: 'credentials',\r\n-      credentials: {\r\n-        email: { label: 'Email', type: 'email' },\r\n-        password: { label: 'Password', type: 'password' },\r\n-      },\r\n-      async authorize(credentials) {\r\n-        await connectMongoDB();\r\n-\r\n-        if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error('Please enter your email and password');\r\n-        }\r\n-\r\n-        const user = await User.findOne({ email: credentials?.email });\r\n-        console.log('User found:', user);\r\n-\r\n-        if (!user || !user?.password) {\r\n-          throw new Error('No user found');\r\n-        }\r\n-\r\n-        const isValidPassword = await bcrypt.compare(\r\n-          credentials.password,\r\n-          user.password,\r\n-        );\r\n-        console.log('Password is valid:', isValidPassword);\r\n-\r\n-        if (!isValidPassword) {\r\n-          throw new Error('Invalid password');\r\n-        }\r\n-        return user;\r\n-      },\r\n-    }),\r\n-  ],\r\n-  secret: process.env.SECRET,\r\n-  session: {\r\n-    strategy: 'jwt',\r\n-  },\r\n-  debug: process.env.NODE_ENV === 'development',\r\n-  callbacks: {\r\n-    async jwt({ token, user }) {\r\n-      await connectMongoDB();\r\n-      const userData = await User.findOne({ email: user?.email });\r\n-      return { ...token, ...userData, ...user };\r\n-    },\r\n-    async session({ session, token }) {\r\n-      session.user = token;\r\n-      return session;\r\n-    },\r\n-    async signIn({ user, account }) {\r\n-      if (account?.provider === 'google' || account?.provider === 'github') {\r\n-        const { name, email, image, picture } = user;\r\n-        try {\r\n-          await connectMongoDB();\r\n-\r\n-          const userExists = await User.findOne({ email });\r\n-\r\n-          if (!userExists) {\r\n-            const res = await fetch('http://localhost:3000/api/user', {\r\n-              method: 'POST',\r\n-              body: JSON.stringify({ name, email, image, picture }),\r\n-              headers: {\r\n-                'Content-Type': 'application/json',\r\n-              },\r\n-            });\r\n-            if (res.ok) {\r\n-              const data = await res.json();\r\n-              console.log('data:', data);\r\n-              return data.user;\r\n-            }\r\n-          }\r\n-          console.log(userExists);\r\n-          return userExists;\r\n-        } catch (error) {\r\n-          console.error(error);\r\n-        }\r\n-      }\r\n-      return true;\r\n-    },\r\n-    async redirect({ url, baseUrl }) {\r\n-      return baseUrl;\r\n-    },\r\n-  },\r\n-});\r\n-\r\n-const handler = NextAuth(\r\n-\r\n-export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1717454830365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { connectMongoDB } from '@/lib/mongodb';\r\n import bcrypt from 'bcrypt';\r\n import User from '@/scheme/User';\r\n \r\n-const AuthOptions = {\r\n+export const AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n"
                },
                {
                    "date": 1717454841605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,7 +99,7 @@\n     },\r\n   },\r\n };\r\n \r\n-const handler = NextAuth()\r\n+const handler = NextAuth(AuthOptions)\r\n \r\n export { handler as GET, handler as POST };\r\n"
                }
            ],
            "date": 1717454801379,
            "name": "Commit-0",
            "content": "import NextAuth from 'next-auth/next';\r\nimport GoogleProvider from 'next-auth/providers/google';\r\nimport GithubProvider from 'next-auth/providers/github';\r\nimport CredentialsProvider from 'next-auth/providers/credentials';\r\nimport { connectMongoDB } from '@/lib/mongodb';\r\nimport bcrypt from 'bcrypt';\r\nimport User from '@/scheme/User';\r\n\r\n{\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n    }),\r\n    GithubProvider({\r\n      clientId: process.env.GITHUB_CLIENT_ID as string,\r\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\r\n    }),\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Password', type: 'password' },\r\n      },\r\n      async authorize(credentials) {\r\n        await connectMongoDB();\r\n\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error('Please enter your email and password');\r\n        }\r\n\r\n        const user = await User.findOne({ email: credentials?.email });\r\n        console.log('User found:', user);\r\n\r\n        if (!user || !user?.password) {\r\n          throw new Error('No user found');\r\n        }\r\n\r\n        const isValidPassword = await bcrypt.compare(\r\n          credentials.password,\r\n          user.password,\r\n        );\r\n        console.log('Password is valid:', isValidPassword);\r\n\r\n        if (!isValidPassword) {\r\n          throw new Error('Invalid password');\r\n        }\r\n        return user;\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.SECRET,\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  debug: process.env.NODE_ENV === 'development',\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      await connectMongoDB();\r\n      const userData = await User.findOne({ email: user?.email });\r\n      return { ...token, ...userData, ...user };\r\n    },\r\n    async session({ session, token }) {\r\n      session.user = token;\r\n      return session;\r\n    },\r\n    async signIn({ user, account }) {\r\n      if (account?.provider === 'google' || account?.provider === 'github') {\r\n        const { name, email, image, picture } = user;\r\n        try {\r\n          await connectMongoDB();\r\n\r\n          const userExists = await User.findOne({ email });\r\n\r\n          if (!userExists) {\r\n            const res = await fetch('http://localhost:3000/api/user', {\r\n              method: 'POST',\r\n              body: JSON.stringify({ name, email, image, picture }),\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            });\r\n            if (res.ok) {\r\n              const data = await res.json();\r\n              console.log('data:', data);\r\n              return data.user;\r\n            }\r\n          }\r\n          console.log(userExists);\r\n          return userExists;\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    async redirect({ url, baseUrl }) {\r\n      return baseUrl;\r\n    },\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"
        }
    ]
}