{
    "sourceFile": "frontend/components/sidebar/Sidebar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717483647660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717483647660,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { usePathname } from 'next/navigation';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { BiSearch } from 'react-icons/bi';\r\nimport { HiHome } from 'react-icons/hi';\r\nimport Box from '../Box';\r\nimport SidebarItem from './SidebarItem';\r\nimport Library from '../Library';\r\nimport { Song } from '@/scheme/Song';\r\nimport usePlayer from '@/hooks/usePlayer';\r\nimport { twMerge } from 'tailwind-merge';\r\nimport { useSession } from 'next-auth/react';\r\nimport getSongByUserId from '@/actions/song/getSongByUserId';\r\nimport 'react-resizable/css/styles.css';\r\nimport { Playlist } from '@/scheme/Playlist';\r\nimport getPlaylistByUserId from '@/actions/playlist/getPlaylistByUserId';\r\nimport Album from '@/scheme/Album';\r\nimport getAlbumByUserId from '@/actions/album/getAlbumByUserId';\r\nimport { UserDto } from '@/scheme/User';\r\nimport getUserById from '@/actions/user/getUserById';\r\nimport RightSidebar from '../rightSidebar/RightSidebar';\r\n\r\ninterface SidebarProp {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarProp> = ({ children }) => {\r\n  const { data: session } = useSession();\r\n\r\n  const [user, setUser] = useState<UserDto>();\r\n\r\n  useEffect(() => {\r\n    const getUser = async () => {\r\n      const res = await getUserById(session?.user?._doc._id);\r\n      setUser(res as UserDto);\r\n    };\r\n    if (session) {\r\n      getUser();\r\n    }\r\n  }, [session]);\r\n\r\n  const [userSong, setUserSong] = useState<Song[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getSongs = async () => {\r\n      const res = await getSongByUserId(session?.user?._doc._id);\r\n      setUserSong(res || []);\r\n    };\r\n    if (session) {\r\n      getSongs();\r\n    }\r\n  }, [session]);\r\n\r\n  const [userPlaylists, setUserPlaylists] = useState<Playlist[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getPlaylists = async () => {\r\n      const res = await getPlaylistByUserId(session?.user?._doc._id);\r\n      setUserPlaylists(res || []);\r\n    };\r\n    if (session) {\r\n      getPlaylists();\r\n    }\r\n  }, [session]);\r\n\r\n  const [userAlbums, setUserAlbums] = useState<Album[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getAlbums = async () => {\r\n      const res = await getAlbumByUserId(session?.user?._doc._id);\r\n      setUserAlbums(res || []);\r\n    };\r\n    if (session) {\r\n      getAlbums();\r\n    }\r\n  }, [session]);\r\n\r\n  const [userContent, setUserContent] = useState<\r\n    (Song | Playlist | Album | UserDto)[]\r\n  >([]);\r\n\r\n  // useEffect(() => {\r\n  //   setUserContent([...userSong, ...userPlaylists, ...userAlbums]);\r\n  // }, [userSong, userPlaylists, userAlbums]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setUserContent([\r\n        ...(user.artistFollowed ?? []),\r\n        ...(user.albumsFollowed ?? []),\r\n        ...(user.likedTracks ?? []),\r\n        ...(user.playlists ?? []),\r\n      ]);\r\n    }\r\n  }, [user]);\r\n\r\n  const [sidebarWidth, setSidebarWidth] = useState(400); // initial sidebar width\r\n  const resizerRef = useRef(null);\r\n  const [isHoveredResizeBar, setIsHoveredResizeBar] = useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsHoveredResizeBar(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHoveredResizeBar(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const resizer = resizerRef.current;\r\n\r\n    function initResizerFn(resizer: HTMLElement | null) {\r\n      // track current mouse position in x var\r\n      let x: number, w: number;\r\n\r\n      function rs_mousedownHandler(e: MouseEvent) {\r\n        e.preventDefault();\r\n        x = e.clientX;\r\n\r\n        w = sidebarWidth;\r\n\r\n        document.addEventListener('mousemove', rs_mousemoveHandler);\r\n        document.addEventListener('mouseup', rs_mouseupHandler);\r\n        handleMouseEnter();\r\n      }\r\n\r\n      function rs_mousemoveHandler(e: MouseEvent) {\r\n        e.preventDefault();\r\n        const dx = e.clientX - x;\r\n\r\n        let cw = w + dx; // complete width\r\n\r\n        if (cw > 1600) {\r\n          cw = 1600;\r\n        } else if (cw < 300) {\r\n          cw = 300;\r\n        }\r\n\r\n        setSidebarWidth(cw);\r\n      }\r\n\r\n      function rs_mouseupHandler() {\r\n        // remove event mousemove && mouseup\r\n        document.removeEventListener('mouseup', rs_mouseupHandler);\r\n        document.removeEventListener('mousemove', rs_mousemoveHandler);\r\n        handleMouseLeave();\r\n      }\r\n\r\n      if (resizer) {\r\n        resizer.addEventListener('mousedown', rs_mousedownHandler);\r\n      }\r\n    }\r\n\r\n    if (resizer) {\r\n      initResizerFn(resizer);\r\n    }\r\n  }, [sidebarWidth]);\r\n\r\n  const pathname = usePathname();\r\n  const player = usePlayer();\r\n\r\n  const routes = useMemo(\r\n    () => [\r\n      {\r\n        icon: HiHome,\r\n        label: 'Home',\r\n        active: pathname !== '/search',\r\n        href: '/',\r\n      },\r\n      {\r\n        icon: BiSearch,\r\n        label: 'Search',\r\n        active: pathname === '/search',\r\n        href: '/search',\r\n      },\r\n    ],\r\n    [pathname],\r\n  );\r\n\r\n  console.log('userSong', userSong);\r\n  console.log('session', session?.user?._doc._id);\r\n\r\n  return (\r\n    <div\r\n      className={twMerge(\r\n        'flex h-full',\r\n        player.activeId && 'h-[calc(100%-72px)]',\r\n      )}\r\n    >\r\n      <div\r\n        className={`hidden md:flex flex-col gap-y-2 bg-black h-full py-2 pl-2`}\r\n        style={{ width: `${sidebarWidth}px` }}\r\n      >\r\n        <Box>\r\n          <div className=\"flex flex-col gap-y-4 px-5 py-4\">\r\n            {routes.map((item) => (\r\n              <SidebarItem key={item.label} {...item} />\r\n            ))}\r\n          </div>\r\n        </Box>\r\n        <Box className=\"overflow-y-auto h-full\">\r\n          <Library data={userContent} />\r\n        </Box>\r\n      </div>\r\n      <div\r\n        ref={resizerRef}\r\n        // className=\"resizer hidden md:flex w-[1px] mx-1 cursor-grab h-full hover:bg-[#727272]\"\r\n        className=\"resizer hidden md:flex w-2 py-2 cursor-grab h-full items-center justify-center opacity-0 hover:opacity-100 active:opacity-100\"\r\n      >\r\n        <div\r\n          className=\"w-[1px] h-[calc(100%-16px)] bg-white  \"\r\n          style={{\r\n            opacity: isHoveredResizeBar ? 1 : 0.5,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <main className=\"h-full flex-1 overflow-y-auto py-2 pr-2 rounded-lg\">\r\n        {children}\r\n      </main>\r\n      <div\r\n        className={twMerge(\r\n          'hidden',\r\n          player.activeId && 'flex flex-col h-full py-2 pr-2 rounded-lg',\r\n        )}\r\n      >\r\n        <RightSidebar songs={userSong} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"
        }
    ]
}